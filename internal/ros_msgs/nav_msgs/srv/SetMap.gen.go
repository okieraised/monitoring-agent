// Code generated by ros2gen. DO NOT EDIT.

package nav_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <nav_msgs/srv/set_map.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("nav_msgs/SetMap", SetMapTypeSupport)
	<no value>.RegisterService("nav_msgs/srv/SetMap", SetMapTypeSupport)
}

type _SetMapTypeSupport struct {}

func (s _SetMapTypeSupport) Request() <no value>.MessageTypeSupport {
	return SetMap_RequestTypeSupport
}

func (s _SetMapTypeSupport) Response() <no value>.MessageTypeSupport {
	return SetMap_ResponseTypeSupport
}

func (s _SetMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__SetMap())
}

// Modifying this variable is undefined behavior.
var SetMapTypeSupport <no value>.ServiceTypeSupport = _SetMapTypeSupport{}

// SetMapClient wraps <no value>.Client to provide type safe helper
// functions
type SetMapClient struct {
	*<no value>.Client
}

// NewSetMapClient creates and returns a new client for the
// SetMap
func NewSetMapClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*SetMapClient, error) {
	client, err := node.NewClient(serviceName, SetMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetMapClient{client}, nil
}

func (s *SetMapClient) Send(ctx context.Context, req *SetMap_Request) (*SetMap_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetMap_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetMapServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s SetMapServiceResponseSender) SendResponse(resp *SetMap_Response) error {
	return s.sender.SendResponse(resp)
}

type SetMapServiceRequestHandler func(*<no value>.ServiceInfo, *SetMap_Request, SetMapServiceResponseSender)

// SetMapService wraps <no value>.Service to provide type safe helper
// functions
type SetMapService struct {
	*<no value>.Service
}

// NewSetMapService creates and returns a new service for the
// SetMap
func NewSetMapService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler SetMapServiceRequestHandler) (*SetMapService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*SetMap_Request)
		responseSender := SetMapServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetMapTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetMapService{service}, nil
}