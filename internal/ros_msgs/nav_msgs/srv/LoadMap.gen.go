// Code generated by ros2gen. DO NOT EDIT.

package nav_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <nav_msgs/srv/load_map.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("nav_msgs/LoadMap", LoadMapTypeSupport)
	<no value>.RegisterService("nav_msgs/srv/LoadMap", LoadMapTypeSupport)
}

type _LoadMapTypeSupport struct {}

func (s _LoadMapTypeSupport) Request() <no value>.MessageTypeSupport {
	return LoadMap_RequestTypeSupport
}

func (s _LoadMapTypeSupport) Response() <no value>.MessageTypeSupport {
	return LoadMap_ResponseTypeSupport
}

func (s _LoadMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__LoadMap())
}

// Modifying this variable is undefined behavior.
var LoadMapTypeSupport <no value>.ServiceTypeSupport = _LoadMapTypeSupport{}

// LoadMapClient wraps <no value>.Client to provide type safe helper
// functions
type LoadMapClient struct {
	*<no value>.Client
}

// NewLoadMapClient creates and returns a new client for the
// LoadMap
func NewLoadMapClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*LoadMapClient, error) {
	client, err := node.NewClient(serviceName, LoadMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoadMapClient{client}, nil
}

func (s *LoadMapClient) Send(ctx context.Context, req *LoadMap_Request) (*LoadMap_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*LoadMap_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type LoadMapServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s LoadMapServiceResponseSender) SendResponse(resp *LoadMap_Response) error {
	return s.sender.SendResponse(resp)
}

type LoadMapServiceRequestHandler func(*<no value>.ServiceInfo, *LoadMap_Request, LoadMapServiceResponseSender)

// LoadMapService wraps <no value>.Service to provide type safe helper
// functions
type LoadMapService struct {
	*<no value>.Service
}

// NewLoadMapService creates and returns a new service for the
// LoadMap
func NewLoadMapService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler LoadMapServiceRequestHandler) (*LoadMapService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*LoadMap_Request)
		responseSender := LoadMapServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, LoadMapTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &LoadMapService{service}, nil
}