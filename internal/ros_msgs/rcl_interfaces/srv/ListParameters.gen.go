// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/list_parameters.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("rcl_interfaces/ListParameters", ListParametersTypeSupport)
	<no value>.RegisterService("rcl_interfaces/srv/ListParameters", ListParametersTypeSupport)
}

type _ListParametersTypeSupport struct {}

func (s _ListParametersTypeSupport) Request() <no value>.MessageTypeSupport {
	return ListParameters_RequestTypeSupport
}

func (s _ListParametersTypeSupport) Response() <no value>.MessageTypeSupport {
	return ListParameters_ResponseTypeSupport
}

func (s _ListParametersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters())
}

// Modifying this variable is undefined behavior.
var ListParametersTypeSupport <no value>.ServiceTypeSupport = _ListParametersTypeSupport{}

// ListParametersClient wraps <no value>.Client to provide type safe helper
// functions
type ListParametersClient struct {
	*<no value>.Client
}

// NewListParametersClient creates and returns a new client for the
// ListParameters
func NewListParametersClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*ListParametersClient, error) {
	client, err := node.NewClient(serviceName, ListParametersTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListParametersClient{client}, nil
}

func (s *ListParametersClient) Send(ctx context.Context, req *ListParameters_Request) (*ListParameters_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ListParameters_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ListParametersServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s ListParametersServiceResponseSender) SendResponse(resp *ListParameters_Response) error {
	return s.sender.SendResponse(resp)
}

type ListParametersServiceRequestHandler func(*<no value>.ServiceInfo, *ListParameters_Request, ListParametersServiceResponseSender)

// ListParametersService wraps <no value>.Service to provide type safe helper
// functions
type ListParametersService struct {
	*<no value>.Service
}

// NewListParametersService creates and returns a new service for the
// ListParameters
func NewListParametersService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler ListParametersServiceRequestHandler) (*ListParametersService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*ListParameters_Request)
		responseSender := ListParametersServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ListParametersTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ListParametersService{service}, nil
}