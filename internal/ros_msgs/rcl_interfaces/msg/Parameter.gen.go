// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	primitives "github.com/okieraised/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/parameter.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/Parameter", ParameterTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/msg/Parameter", ParameterTypeSupport)
}

type Parameter struct {
	Name string `yaml:"name"`// The full name of the parameter.
	Value ParameterValue `yaml:"value"`// The parameter's value which can be one of several types, see`ParameterValue.msg` and `ParameterType.msg`.
}

// NewParameter creates a new Parameter with default values.
func NewParameter() *Parameter {
	self := Parameter{}
	self.SetDefaults()
	return &self
}

func (t *Parameter) Clone() *Parameter {
	c := &Parameter{}
	c.Name = t.Name
	c.Value = *t.Value.Clone()
	return c
}

func (t *Parameter) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Parameter) SetDefaults() {
	t.Name = ""
	t.Value.SetDefaults()
}

func (t *Parameter) GetTypeSupport() types.MessageTypeSupport {
	return ParameterTypeSupport
}

// ParameterPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParameterPublisher struct {
	*rclgo.Publisher
}

// NewParameterPublisher creates and returns a new publisher for the
// Parameter
func NewParameterPublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*ParameterPublisher, error) {
	pub, err := node.NewPublisher(topicName, ParameterTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterPublisher{pub}, nil
}

func (p *ParameterPublisher) Publish(msg *Parameter) error {
	return p.Publisher.Publish(msg)
}

// ParameterSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParameterSubscription struct {
	*rclgo.Subscription
}

// ParameterSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterSubscription.
type ParameterSubscriptionCallback func(msg *Parameter, info *rclgo.MessageInfo, err error)

// NewParameterSubscription creates and returns a new subscription for the
// Parameter
func NewParameterSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParameterSubscriptionCallback) (*ParameterSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Parameter
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ParameterTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterSubscription{sub}, nil
}

func (s *ParameterSubscription) TakeMessage(out *Parameter) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterSlice(dst, src []Parameter) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterTypeSupport types.MessageTypeSupport = _ParameterTypeSupport{}

type _ParameterTypeSupport struct{}

func (t _ParameterTypeSupport) New() types.Message {
	return NewParameter()
}

func (t _ParameterTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__Parameter
	return (unsafe.Pointer)(C.rcl_interfaces__msg__Parameter__create())
}

func (t _ParameterTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__Parameter__destroy((*C.rcl_interfaces__msg__Parameter)(pointer_to_free))
}

func (t _ParameterTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Parameter)
	mem := (*C.rcl_interfaces__msg__Parameter)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&mem.value), &m.Value)
}

func (t _ParameterTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Parameter)
	mem := (*C.rcl_interfaces__msg__Parameter)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	ParameterValueTypeSupport.AsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
}

func (t _ParameterTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter())
}

type CParameter = C.rcl_interfaces__msg__Parameter
type CParameterSequence = C.rcl_interfaces__msg__Parameter__Sequence

func ParameterSequenceToGo(goSlice *[]Parameter, cSlice CParameterSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Parameter, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ParameterSequenceToC(cSlice *CParameterSequence, goSlice []Parameter) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__Parameter)(C.malloc(C.sizeof_struct_rcl_interfaces__msg__Parameter * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ParameterArrayToGo(goSlice []Parameter, cSlice []CParameter) {
	for i := 0; i < len(cSlice); i++ {
		ParameterTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ParameterArrayToC(cSlice []CParameter, goSlice []Parameter) {
	for i := 0; i < len(goSlice); i++ {
		ParameterTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
