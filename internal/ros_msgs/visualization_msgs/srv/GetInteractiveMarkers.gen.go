// Code generated by ros2gen. DO NOT EDIT.

package visualization_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <visualization_msgs/srv/get_interactive_markers.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("visualization_msgs/GetInteractiveMarkers", GetInteractiveMarkersTypeSupport)
	<no value>.RegisterService("visualization_msgs/srv/GetInteractiveMarkers", GetInteractiveMarkersTypeSupport)
}

type _GetInteractiveMarkersTypeSupport struct {}

func (s _GetInteractiveMarkersTypeSupport) Request() <no value>.MessageTypeSupport {
	return GetInteractiveMarkers_RequestTypeSupport
}

func (s _GetInteractiveMarkersTypeSupport) Response() <no value>.MessageTypeSupport {
	return GetInteractiveMarkers_ResponseTypeSupport
}

func (s _GetInteractiveMarkersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__visualization_msgs__srv__GetInteractiveMarkers())
}

// Modifying this variable is undefined behavior.
var GetInteractiveMarkersTypeSupport <no value>.ServiceTypeSupport = _GetInteractiveMarkersTypeSupport{}

// GetInteractiveMarkersClient wraps <no value>.Client to provide type safe helper
// functions
type GetInteractiveMarkersClient struct {
	*<no value>.Client
}

// NewGetInteractiveMarkersClient creates and returns a new client for the
// GetInteractiveMarkers
func NewGetInteractiveMarkersClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*GetInteractiveMarkersClient, error) {
	client, err := node.NewClient(serviceName, GetInteractiveMarkersTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetInteractiveMarkersClient{client}, nil
}

func (s *GetInteractiveMarkersClient) Send(ctx context.Context, req *GetInteractiveMarkers_Request) (*GetInteractiveMarkers_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetInteractiveMarkers_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetInteractiveMarkersServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s GetInteractiveMarkersServiceResponseSender) SendResponse(resp *GetInteractiveMarkers_Response) error {
	return s.sender.SendResponse(resp)
}

type GetInteractiveMarkersServiceRequestHandler func(*<no value>.ServiceInfo, *GetInteractiveMarkers_Request, GetInteractiveMarkersServiceResponseSender)

// GetInteractiveMarkersService wraps <no value>.Service to provide type safe helper
// functions
type GetInteractiveMarkersService struct {
	*<no value>.Service
}

// NewGetInteractiveMarkersService creates and returns a new service for the
// GetInteractiveMarkers
func NewGetInteractiveMarkersService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler GetInteractiveMarkersServiceRequestHandler) (*GetInteractiveMarkersService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*GetInteractiveMarkers_Request)
		responseSender := GetInteractiveMarkersServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetInteractiveMarkersTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetInteractiveMarkersService{service}, nil
}