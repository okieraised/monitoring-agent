// Code generated by ros2gen. DO NOT EDIT.

package std_srvs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <std_srvs/srv/trigger.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("std_srvs/Trigger", TriggerTypeSupport)
	<no value>.RegisterService("std_srvs/srv/Trigger", TriggerTypeSupport)
}

type _TriggerTypeSupport struct {}

func (s _TriggerTypeSupport) Request() <no value>.MessageTypeSupport {
	return Trigger_RequestTypeSupport
}

func (s _TriggerTypeSupport) Response() <no value>.MessageTypeSupport {
	return Trigger_ResponseTypeSupport
}

func (s _TriggerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger())
}

// Modifying this variable is undefined behavior.
var TriggerTypeSupport <no value>.ServiceTypeSupport = _TriggerTypeSupport{}

// TriggerClient wraps <no value>.Client to provide type safe helper
// functions
type TriggerClient struct {
	*<no value>.Client
}

// NewTriggerClient creates and returns a new client for the
// Trigger
func NewTriggerClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*TriggerClient, error) {
	client, err := node.NewClient(serviceName, TriggerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TriggerClient{client}, nil
}

func (s *TriggerClient) Send(ctx context.Context, req *Trigger_Request) (*Trigger_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*Trigger_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type TriggerServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s TriggerServiceResponseSender) SendResponse(resp *Trigger_Response) error {
	return s.sender.SendResponse(resp)
}

type TriggerServiceRequestHandler func(*<no value>.ServiceInfo, *Trigger_Request, TriggerServiceResponseSender)

// TriggerService wraps <no value>.Service to provide type safe helper
// functions
type TriggerService struct {
	*<no value>.Service
}

// NewTriggerService creates and returns a new service for the
// Trigger
func NewTriggerService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler TriggerServiceRequestHandler) (*TriggerService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*Trigger_Request)
		responseSender := TriggerServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, TriggerTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &TriggerService{service}, nil
}