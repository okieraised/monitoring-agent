// Code generated by ros2gen. DO NOT EDIT.

package type_description_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	primitives "github.com/okieraised/rclgo/pkg/rclgo/primitives"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <type_description_interfaces/srv/get_type_description.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("type_description_interfaces/GetTypeDescription_Request", GetTypeDescription_RequestTypeSupport)
	typemap.RegisterMessage("type_description_interfaces/srv/GetTypeDescription_Request", GetTypeDescription_RequestTypeSupport)
}

type GetTypeDescription_Request struct {
	TypeName           string `yaml:"type_name"`            // ROS interface type name, in PACKAGE/NAMESPACE/TYPENAME format.
	TypeHash           string `yaml:"type_hash"`            // REP-2011 RIHS hash string.
	IncludeTypeSources bool   `yaml:"include_type_sources"` // Whether to return the original idl/msg/etc. source file(s) in the response.
}

// NewGetTypeDescription_Request creates a new GetTypeDescription_Request with default values.
func NewGetTypeDescription_Request() *GetTypeDescription_Request {
	self := GetTypeDescription_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetTypeDescription_Request) Clone() *GetTypeDescription_Request {
	c := &GetTypeDescription_Request{}
	c.TypeName = t.TypeName
	c.TypeHash = t.TypeHash
	c.IncludeTypeSources = t.IncludeTypeSources
	return c
}

func (t *GetTypeDescription_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetTypeDescription_Request) SetDefaults() {
	t.TypeName = ""
	t.TypeHash = ""
	t.IncludeTypeSources = true
}

func (t *GetTypeDescription_Request) GetTypeSupport() types.MessageTypeSupport {
	return GetTypeDescription_RequestTypeSupport
}

// GetTypeDescription_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetTypeDescription_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGetTypeDescription_RequestPublisher creates and returns a new publisher for the
// GetTypeDescription_Request
func NewGetTypeDescription_RequestPublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*GetTypeDescription_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GetTypeDescription_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetTypeDescription_RequestPublisher{pub}, nil
}

func (p *GetTypeDescription_RequestPublisher) Publish(msg *GetTypeDescription_Request) error {
	return p.Publisher.Publish(msg)
}

// GetTypeDescription_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetTypeDescription_RequestSubscription struct {
	*rclgo.Subscription
}

// GetTypeDescription_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetTypeDescription_RequestSubscription.
type GetTypeDescription_RequestSubscriptionCallback func(msg *GetTypeDescription_Request, info *rclgo.MessageInfo, err error)

// NewGetTypeDescription_RequestSubscription creates and returns a new subscription for the
// GetTypeDescription_Request
func NewGetTypeDescription_RequestSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetTypeDescription_RequestSubscriptionCallback) (*GetTypeDescription_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetTypeDescription_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetTypeDescription_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetTypeDescription_RequestSubscription{sub}, nil
}

func (s *GetTypeDescription_RequestSubscription) TakeMessage(out *GetTypeDescription_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetTypeDescription_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetTypeDescription_RequestSlice(dst, src []GetTypeDescription_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetTypeDescription_RequestTypeSupport types.MessageTypeSupport = _GetTypeDescription_RequestTypeSupport{}

type _GetTypeDescription_RequestTypeSupport struct{}

func (t _GetTypeDescription_RequestTypeSupport) New() types.Message {
	return NewGetTypeDescription_Request()
}

func (t _GetTypeDescription_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.type_description_interfaces__srv__GetTypeDescription_Request
	return (unsafe.Pointer)(C.type_description_interfaces__srv__GetTypeDescription_Request__create())
}

func (t _GetTypeDescription_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.type_description_interfaces__srv__GetTypeDescription_Request__destroy((*C.type_description_interfaces__srv__GetTypeDescription_Request)(pointer_to_free))
}

func (t _GetTypeDescription_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetTypeDescription_Request)
	mem := (*C.type_description_interfaces__srv__GetTypeDescription_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.type_name), m.TypeName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.type_hash), m.TypeHash)
	mem.include_type_sources = C.bool(m.IncludeTypeSources)
}

func (t _GetTypeDescription_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetTypeDescription_Request)
	mem := (*C.type_description_interfaces__srv__GetTypeDescription_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.TypeName, unsafe.Pointer(&mem.type_name))
	primitives.StringAsGoStruct(&m.TypeHash, unsafe.Pointer(&mem.type_hash))
	m.IncludeTypeSources = bool(mem.include_type_sources)
}

func (t _GetTypeDescription_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__type_description_interfaces__srv__GetTypeDescription_Request())
}

type CGetTypeDescription_Request = C.type_description_interfaces__srv__GetTypeDescription_Request
type CGetTypeDescription_RequestSequence = C.type_description_interfaces__srv__GetTypeDescription_Request__Sequence

func GetTypeDescription_RequestSequenceToGo(goSlice *[]GetTypeDescription_Request, cSlice CGetTypeDescription_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetTypeDescription_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetTypeDescription_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetTypeDescription_RequestSequenceToC(cSlice *CGetTypeDescription_RequestSequence, goSlice []GetTypeDescription_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.type_description_interfaces__srv__GetTypeDescription_Request)(C.malloc(C.sizeof_struct_type_description_interfaces__srv__GetTypeDescription_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetTypeDescription_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetTypeDescription_RequestArrayToGo(goSlice []GetTypeDescription_Request, cSlice []CGetTypeDescription_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetTypeDescription_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetTypeDescription_RequestArrayToC(cSlice []CGetTypeDescription_Request, goSlice []GetTypeDescription_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetTypeDescription_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
