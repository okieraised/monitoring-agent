// Code generated by ros2gen. DO NOT EDIT.

package type_description_interfaces_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <type_description_interfaces/msg/type_description.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("type_description_interfaces/TypeDescription", TypeDescriptionTypeSupport)
	typemap.RegisterMessage("type_description_interfaces/msg/TypeDescription", TypeDescriptionTypeSupport)
}

type TypeDescription struct {
	TypeDescription            IndividualTypeDescription   `yaml:"type_description"`             // Description of the type.
	ReferencedTypeDescriptions []IndividualTypeDescription `yaml:"referenced_type_descriptions"` // Descriptions of all referenced types, recursively.
}

// NewTypeDescription creates a new TypeDescription with default values.
func NewTypeDescription() *TypeDescription {
	self := TypeDescription{}
	self.SetDefaults()
	return &self
}

func (t *TypeDescription) Clone() *TypeDescription {
	c := &TypeDescription{}
	c.TypeDescription = *t.TypeDescription.Clone()
	if t.ReferencedTypeDescriptions != nil {
		c.ReferencedTypeDescriptions = make([]IndividualTypeDescription, len(t.ReferencedTypeDescriptions))
		CloneIndividualTypeDescriptionSlice(c.ReferencedTypeDescriptions, t.ReferencedTypeDescriptions)
	}
	return c
}

func (t *TypeDescription) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TypeDescription) SetDefaults() {
	t.TypeDescription.SetDefaults()
	t.ReferencedTypeDescriptions = nil
}

func (t *TypeDescription) GetTypeSupport() types.MessageTypeSupport {
	return TypeDescriptionTypeSupport
}

// TypeDescriptionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TypeDescriptionPublisher struct {
	*rclgo.Publisher
}

// NewTypeDescriptionPublisher creates and returns a new publisher for the
// TypeDescription
func NewTypeDescriptionPublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*TypeDescriptionPublisher, error) {
	pub, err := node.NewPublisher(topicName, TypeDescriptionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TypeDescriptionPublisher{pub}, nil
}

func (p *TypeDescriptionPublisher) Publish(msg *TypeDescription) error {
	return p.Publisher.Publish(msg)
}

// TypeDescriptionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TypeDescriptionSubscription struct {
	*rclgo.Subscription
}

// TypeDescriptionSubscriptionCallback type is used to provide a subscription
// handler function for a TypeDescriptionSubscription.
type TypeDescriptionSubscriptionCallback func(msg *TypeDescription, info *rclgo.MessageInfo, err error)

// NewTypeDescriptionSubscription creates and returns a new subscription for the
// TypeDescription
func NewTypeDescriptionSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback TypeDescriptionSubscriptionCallback) (*TypeDescriptionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TypeDescription
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TypeDescriptionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TypeDescriptionSubscription{sub}, nil
}

func (s *TypeDescriptionSubscription) TakeMessage(out *TypeDescription) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTypeDescriptionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTypeDescriptionSlice(dst, src []TypeDescription) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TypeDescriptionTypeSupport types.MessageTypeSupport = _TypeDescriptionTypeSupport{}

type _TypeDescriptionTypeSupport struct{}

func (t _TypeDescriptionTypeSupport) New() types.Message {
	return NewTypeDescription()
}

func (t _TypeDescriptionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.type_description_interfaces__msg__TypeDescription
	return (unsafe.Pointer)(C.type_description_interfaces__msg__TypeDescription__create())
}

func (t _TypeDescriptionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.type_description_interfaces__msg__TypeDescription__destroy((*C.type_description_interfaces__msg__TypeDescription)(pointer_to_free))
}

func (t _TypeDescriptionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TypeDescription)
	mem := (*C.type_description_interfaces__msg__TypeDescription)(dst)
	IndividualTypeDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&mem.type_description), &m.TypeDescription)
	IndividualTypeDescriptionSequenceToC(&mem.referenced_type_descriptions, m.ReferencedTypeDescriptions)
}

func (t _TypeDescriptionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TypeDescription)
	mem := (*C.type_description_interfaces__msg__TypeDescription)(ros2_message_buffer)
	IndividualTypeDescriptionTypeSupport.AsGoStruct(&m.TypeDescription, unsafe.Pointer(&mem.type_description))
	IndividualTypeDescriptionSequenceToGo(&m.ReferencedTypeDescriptions, mem.referenced_type_descriptions)
}

func (t _TypeDescriptionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__type_description_interfaces__msg__TypeDescription())
}

type CTypeDescription = C.type_description_interfaces__msg__TypeDescription
type CTypeDescriptionSequence = C.type_description_interfaces__msg__TypeDescription__Sequence

func TypeDescriptionSequenceToGo(goSlice *[]TypeDescription, cSlice CTypeDescriptionSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TypeDescription, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TypeDescriptionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TypeDescriptionSequenceToC(cSlice *CTypeDescriptionSequence, goSlice []TypeDescription) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.type_description_interfaces__msg__TypeDescription)(C.malloc(C.sizeof_struct_type_description_interfaces__msg__TypeDescription * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TypeDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TypeDescriptionArrayToGo(goSlice []TypeDescription, cSlice []CTypeDescription) {
	for i := 0; i < len(cSlice); i++ {
		TypeDescriptionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TypeDescriptionArrayToC(cSlice []CTypeDescription, goSlice []TypeDescription) {
	for i := 0; i < len(goSlice); i++ {
		TypeDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
