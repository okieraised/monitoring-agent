// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/navigate_to_point.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/NavigateToPoint_GetResult", NavigateToPoint_GetResultTypeSupport)
	<no value>.RegisterService("as2_msgs/action/NavigateToPoint_GetResult", NavigateToPoint_GetResultTypeSupport)
}

type _NavigateToPoint_GetResultTypeSupport struct {}

func (s _NavigateToPoint_GetResultTypeSupport) Request() <no value>.MessageTypeSupport {
	return NavigateToPoint_GetResult_RequestTypeSupport
}

func (s _NavigateToPoint_GetResultTypeSupport) Response() <no value>.MessageTypeSupport {
	return NavigateToPoint_GetResult_ResponseTypeSupport
}

func (s _NavigateToPoint_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__NavigateToPoint_GetResult())
}

// Modifying this variable is undefined behavior.
var NavigateToPoint_GetResultTypeSupport <no value>.ServiceTypeSupport = _NavigateToPoint_GetResultTypeSupport{}

// NavigateToPoint_GetResultClient wraps <no value>.Client to provide type safe helper
// functions
type NavigateToPoint_GetResultClient struct {
	*<no value>.Client
}

// NewNavigateToPoint_GetResultClient creates and returns a new client for the
// NavigateToPoint_GetResult
func NewNavigateToPoint_GetResultClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*NavigateToPoint_GetResultClient, error) {
	client, err := node.NewClient(serviceName, NavigateToPoint_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NavigateToPoint_GetResultClient{client}, nil
}

func (s *NavigateToPoint_GetResultClient) Send(ctx context.Context, req *NavigateToPoint_GetResult_Request) (*NavigateToPoint_GetResult_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*NavigateToPoint_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type NavigateToPoint_GetResultServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s NavigateToPoint_GetResultServiceResponseSender) SendResponse(resp *NavigateToPoint_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type NavigateToPoint_GetResultServiceRequestHandler func(*<no value>.ServiceInfo, *NavigateToPoint_GetResult_Request, NavigateToPoint_GetResultServiceResponseSender)

// NavigateToPoint_GetResultService wraps <no value>.Service to provide type safe helper
// functions
type NavigateToPoint_GetResultService struct {
	*<no value>.Service
}

// NewNavigateToPoint_GetResultService creates and returns a new service for the
// NavigateToPoint_GetResult
func NewNavigateToPoint_GetResultService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler NavigateToPoint_GetResultServiceRequestHandler) (*NavigateToPoint_GetResultService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*NavigateToPoint_GetResult_Request)
		responseSender := NavigateToPoint_GetResultServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, NavigateToPoint_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &NavigateToPoint_GetResultService{service}, nil
}