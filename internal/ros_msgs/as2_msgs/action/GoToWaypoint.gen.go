// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/go_to_waypoint.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/okieraised/rclgo/humble"

	action_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/action_msgs/msg"
	action_msgs_srv "github.com/okieraised/monitoring-agent/internal/ros_msgs/action_msgs/srv"
)

func init() {
	<no value>.RegisterAction("as2_msgs/GoToWaypoint", GoToWaypointTypeSupport)
	<no value>.RegisterAction("as2_msgs/action/GoToWaypoint", GoToWaypointTypeSupport)
}

type _GoToWaypointTypeSupport struct {}

func (s _GoToWaypointTypeSupport) Goal() <no value>.MessageTypeSupport {
	return GoToWaypoint_GoalTypeSupport
}

func (s _GoToWaypointTypeSupport) SendGoal() <no value>.ServiceTypeSupport {
	return GoToWaypoint_SendGoalTypeSupport
}

func (s _GoToWaypointTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) <no value>.Message {
	msg := NewGoToWaypoint_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _GoToWaypointTypeSupport) Result() <no value>.MessageTypeSupport {
	return GoToWaypoint_ResultTypeSupport
}

func (s _GoToWaypointTypeSupport) GetResult() <no value>.ServiceTypeSupport {
	return GoToWaypoint_GetResultTypeSupport
}

func (s _GoToWaypointTypeSupport) NewGetResultResponse(status int8, result types.Message) <no value>.Message {
	msg := NewGoToWaypoint_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewGoToWaypoint_Result()
	} else {
		msg.Result = *result.(*GoToWaypoint_Result)
	}
	return msg
}

func (s _GoToWaypointTypeSupport) CancelGoal() <no value>.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _GoToWaypointTypeSupport) Feedback() <no value>.MessageTypeSupport {
	return GoToWaypoint_FeedbackTypeSupport
}

func (s _GoToWaypointTypeSupport) FeedbackMessage() <no value>.MessageTypeSupport {
	return GoToWaypoint_FeedbackMessageTypeSupport
}

func (s _GoToWaypointTypeSupport) NewFeedbackMessage(goalID *<no value>.GoalID, feedback <no value>.Message) <no value>.Message {
	msg := NewGoToWaypoint_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*GoToWaypoint_Feedback)
	return msg
}

func (s _GoToWaypointTypeSupport) GoalStatusArray() <no value>.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _GoToWaypointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__as2_msgs__action__GoToWaypoint())
}

// Modifying this variable is undefined behavior.
var GoToWaypointTypeSupport <no value>.ActionTypeSupport = _GoToWaypointTypeSupport{}

type GoToWaypointFeedbackSender struct {
	sender <no value>.FeedbackSender
}

func (s *GoToWaypointFeedbackSender) Send(msg *GoToWaypoint_Feedback) error {
	return s.sender.Send(msg)
}

type GoToWaypointGoalHandle struct{
	*<no value>.GoalHandle

	Description *GoToWaypoint_Goal
}

func (g *GoToWaypointGoalHandle) Accept() (*GoToWaypointFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &GoToWaypointFeedbackSender{*s}, nil
}

type GoToWaypointAction interface {
	ExecuteGoal(context.Context, *GoToWaypointGoalHandle) (*GoToWaypoint_Result, error)
}

func NewGoToWaypointAction(
	executeGoal func(context.Context, *GoToWaypointGoalHandle) (*GoToWaypoint_Result, error),
) GoToWaypointAction {
	return _GoToWaypointFuncAction(executeGoal)
}

type _GoToWaypointFuncAction func(context.Context, *GoToWaypointGoalHandle) (*GoToWaypoint_Result, error)

func (a _GoToWaypointFuncAction) ExecuteGoal(
	ctx context.Context, goal *GoToWaypointGoalHandle,
) (*GoToWaypoint_Result, error) {
	return a(ctx, goal)
}

type _GoToWaypointAction struct {
	action GoToWaypointAction
}

func (a _GoToWaypointAction) ExecuteGoal(ctx context.Context, handle *<no value>.GoalHandle) (<no value>.Message, error) {
	return a.action.ExecuteGoal(ctx, &GoToWaypointGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*GoToWaypoint_Goal),
	})
}

func (a _GoToWaypointAction) TypeSupport() <no value>.ActionTypeSupport {
	return GoToWaypointTypeSupport
}

type GoToWaypointServer struct{
	*<no value>.ActionServer
}

func NewGoToWaypointServer(node *<no value>.Node, name string, action GoToWaypointAction, opts *<no value>.ActionServerOptions) (*GoToWaypointServer, error) {
	server, err := node.NewActionServer(name, _GoToWaypointAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &GoToWaypointServer{server}, nil
}

type GoToWaypointFeedbackHandler func(context.Context, *GoToWaypoint_FeedbackMessage)

type GoToWaypointStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type GoToWaypointClient struct{
	*<no value>.ActionClient
}

func NewGoToWaypointClient(node *<no value>.Node, name string, opts *<no value>.ActionClientOptions) (*GoToWaypointClient, error) {
	client, err := node.NewActionClient(name, GoToWaypointTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &GoToWaypointClient{client}, nil
}

func (c *GoToWaypointClient) WatchGoal(ctx context.Context, goal *GoToWaypoint_Goal, onFeedback GoToWaypointFeedbackHandler) (*GoToWaypoint_GetResult_Response, *<no value>.GoalID, error) {
	var resp <no value>.Message
	var goalID *<no value>.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg <no value>.Message) {
			onFeedback(ctx, msg.(*GoToWaypoint_FeedbackMessage))
		})
	}
	if r, ok := resp.(*GoToWaypoint_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *GoToWaypointClient) SendGoal(ctx context.Context, goal *GoToWaypoint_Goal) (*GoToWaypoint_SendGoal_Response, *<no value>.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*GoToWaypoint_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *GoToWaypointClient) SendGoalRequest(ctx context.Context, request *GoToWaypoint_SendGoal_Request) (*GoToWaypoint_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*GoToWaypoint_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *GoToWaypointClient) GetResult(ctx context.Context, goalID *<no value>.GoalID) (*GoToWaypoint_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*GoToWaypoint_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *GoToWaypointClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *GoToWaypointClient) WatchFeedback(ctx context.Context, goalID *<no value>.GoalID, handler GoToWaypointFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg <no value>.Message) {
		handler(ctx, msg.(*GoToWaypoint_FeedbackMessage))
	})
}

func (c *GoToWaypointClient) WatchStatus(ctx context.Context, goalID *<no value>.GoalID, handler GoToWaypointStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg <no value>.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
