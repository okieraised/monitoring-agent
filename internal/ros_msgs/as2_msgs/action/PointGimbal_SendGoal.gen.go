// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/point_gimbal.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/PointGimbal_SendGoal", PointGimbal_SendGoalTypeSupport)
	<no value>.RegisterService("as2_msgs/action/PointGimbal_SendGoal", PointGimbal_SendGoalTypeSupport)
}

type _PointGimbal_SendGoalTypeSupport struct {}

func (s _PointGimbal_SendGoalTypeSupport) Request() <no value>.MessageTypeSupport {
	return PointGimbal_SendGoal_RequestTypeSupport
}

func (s _PointGimbal_SendGoalTypeSupport) Response() <no value>.MessageTypeSupport {
	return PointGimbal_SendGoal_ResponseTypeSupport
}

func (s _PointGimbal_SendGoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__PointGimbal_SendGoal())
}

// Modifying this variable is undefined behavior.
var PointGimbal_SendGoalTypeSupport <no value>.ServiceTypeSupport = _PointGimbal_SendGoalTypeSupport{}

// PointGimbal_SendGoalClient wraps <no value>.Client to provide type safe helper
// functions
type PointGimbal_SendGoalClient struct {
	*<no value>.Client
}

// NewPointGimbal_SendGoalClient creates and returns a new client for the
// PointGimbal_SendGoal
func NewPointGimbal_SendGoalClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*PointGimbal_SendGoalClient, error) {
	client, err := node.NewClient(serviceName, PointGimbal_SendGoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_SendGoalClient{client}, nil
}

func (s *PointGimbal_SendGoalClient) Send(ctx context.Context, req *PointGimbal_SendGoal_Request) (*PointGimbal_SendGoal_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*PointGimbal_SendGoal_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type PointGimbal_SendGoalServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s PointGimbal_SendGoalServiceResponseSender) SendResponse(resp *PointGimbal_SendGoal_Response) error {
	return s.sender.SendResponse(resp)
}

type PointGimbal_SendGoalServiceRequestHandler func(*<no value>.ServiceInfo, *PointGimbal_SendGoal_Request, PointGimbal_SendGoalServiceResponseSender)

// PointGimbal_SendGoalService wraps <no value>.Service to provide type safe helper
// functions
type PointGimbal_SendGoalService struct {
	*<no value>.Service
}

// NewPointGimbal_SendGoalService creates and returns a new service for the
// PointGimbal_SendGoal
func NewPointGimbal_SendGoalService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler PointGimbal_SendGoalServiceRequestHandler) (*PointGimbal_SendGoalService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*PointGimbal_SendGoal_Request)
		responseSender := PointGimbal_SendGoalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, PointGimbal_SendGoalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_SendGoalService{service}, nil
}