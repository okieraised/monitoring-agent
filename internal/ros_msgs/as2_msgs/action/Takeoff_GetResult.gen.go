// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/takeoff.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/Takeoff_GetResult", Takeoff_GetResultTypeSupport)
	<no value>.RegisterService("as2_msgs/action/Takeoff_GetResult", Takeoff_GetResultTypeSupport)
}

type _Takeoff_GetResultTypeSupport struct {}

func (s _Takeoff_GetResultTypeSupport) Request() <no value>.MessageTypeSupport {
	return Takeoff_GetResult_RequestTypeSupport
}

func (s _Takeoff_GetResultTypeSupport) Response() <no value>.MessageTypeSupport {
	return Takeoff_GetResult_ResponseTypeSupport
}

func (s _Takeoff_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__Takeoff_GetResult())
}

// Modifying this variable is undefined behavior.
var Takeoff_GetResultTypeSupport <no value>.ServiceTypeSupport = _Takeoff_GetResultTypeSupport{}

// Takeoff_GetResultClient wraps <no value>.Client to provide type safe helper
// functions
type Takeoff_GetResultClient struct {
	*<no value>.Client
}

// NewTakeoff_GetResultClient creates and returns a new client for the
// Takeoff_GetResult
func NewTakeoff_GetResultClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*Takeoff_GetResultClient, error) {
	client, err := node.NewClient(serviceName, Takeoff_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Takeoff_GetResultClient{client}, nil
}

func (s *Takeoff_GetResultClient) Send(ctx context.Context, req *Takeoff_GetResult_Request) (*Takeoff_GetResult_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*Takeoff_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type Takeoff_GetResultServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s Takeoff_GetResultServiceResponseSender) SendResponse(resp *Takeoff_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type Takeoff_GetResultServiceRequestHandler func(*<no value>.ServiceInfo, *Takeoff_GetResult_Request, Takeoff_GetResultServiceResponseSender)

// Takeoff_GetResultService wraps <no value>.Service to provide type safe helper
// functions
type Takeoff_GetResultService struct {
	*<no value>.Service
}

// NewTakeoff_GetResultService creates and returns a new service for the
// Takeoff_GetResult
func NewTakeoff_GetResultService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler Takeoff_GetResultServiceRequestHandler) (*Takeoff_GetResultService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*Takeoff_GetResult_Request)
		responseSender := Takeoff_GetResultServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, Takeoff_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &Takeoff_GetResultService{service}, nil
}