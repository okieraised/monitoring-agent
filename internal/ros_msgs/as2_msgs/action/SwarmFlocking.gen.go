// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/swarm_flocking.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/okieraised/rclgo/humble"

	action_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/action_msgs/msg"
	action_msgs_srv "github.com/okieraised/monitoring-agent/internal/ros_msgs/action_msgs/srv"
)

func init() {
	<no value>.RegisterAction("as2_msgs/SwarmFlocking", SwarmFlockingTypeSupport)
	<no value>.RegisterAction("as2_msgs/action/SwarmFlocking", SwarmFlockingTypeSupport)
}

type _SwarmFlockingTypeSupport struct {}

func (s _SwarmFlockingTypeSupport) Goal() <no value>.MessageTypeSupport {
	return SwarmFlocking_GoalTypeSupport
}

func (s _SwarmFlockingTypeSupport) SendGoal() <no value>.ServiceTypeSupport {
	return SwarmFlocking_SendGoalTypeSupport
}

func (s _SwarmFlockingTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) <no value>.Message {
	msg := NewSwarmFlocking_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _SwarmFlockingTypeSupport) Result() <no value>.MessageTypeSupport {
	return SwarmFlocking_ResultTypeSupport
}

func (s _SwarmFlockingTypeSupport) GetResult() <no value>.ServiceTypeSupport {
	return SwarmFlocking_GetResultTypeSupport
}

func (s _SwarmFlockingTypeSupport) NewGetResultResponse(status int8, result types.Message) <no value>.Message {
	msg := NewSwarmFlocking_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewSwarmFlocking_Result()
	} else {
		msg.Result = *result.(*SwarmFlocking_Result)
	}
	return msg
}

func (s _SwarmFlockingTypeSupport) CancelGoal() <no value>.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _SwarmFlockingTypeSupport) Feedback() <no value>.MessageTypeSupport {
	return SwarmFlocking_FeedbackTypeSupport
}

func (s _SwarmFlockingTypeSupport) FeedbackMessage() <no value>.MessageTypeSupport {
	return SwarmFlocking_FeedbackMessageTypeSupport
}

func (s _SwarmFlockingTypeSupport) NewFeedbackMessage(goalID *<no value>.GoalID, feedback <no value>.Message) <no value>.Message {
	msg := NewSwarmFlocking_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*SwarmFlocking_Feedback)
	return msg
}

func (s _SwarmFlockingTypeSupport) GoalStatusArray() <no value>.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _SwarmFlockingTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__as2_msgs__action__SwarmFlocking())
}

// Modifying this variable is undefined behavior.
var SwarmFlockingTypeSupport <no value>.ActionTypeSupport = _SwarmFlockingTypeSupport{}

type SwarmFlockingFeedbackSender struct {
	sender <no value>.FeedbackSender
}

func (s *SwarmFlockingFeedbackSender) Send(msg *SwarmFlocking_Feedback) error {
	return s.sender.Send(msg)
}

type SwarmFlockingGoalHandle struct{
	*<no value>.GoalHandle

	Description *SwarmFlocking_Goal
}

func (g *SwarmFlockingGoalHandle) Accept() (*SwarmFlockingFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &SwarmFlockingFeedbackSender{*s}, nil
}

type SwarmFlockingAction interface {
	ExecuteGoal(context.Context, *SwarmFlockingGoalHandle) (*SwarmFlocking_Result, error)
}

func NewSwarmFlockingAction(
	executeGoal func(context.Context, *SwarmFlockingGoalHandle) (*SwarmFlocking_Result, error),
) SwarmFlockingAction {
	return _SwarmFlockingFuncAction(executeGoal)
}

type _SwarmFlockingFuncAction func(context.Context, *SwarmFlockingGoalHandle) (*SwarmFlocking_Result, error)

func (a _SwarmFlockingFuncAction) ExecuteGoal(
	ctx context.Context, goal *SwarmFlockingGoalHandle,
) (*SwarmFlocking_Result, error) {
	return a(ctx, goal)
}

type _SwarmFlockingAction struct {
	action SwarmFlockingAction
}

func (a _SwarmFlockingAction) ExecuteGoal(ctx context.Context, handle *<no value>.GoalHandle) (<no value>.Message, error) {
	return a.action.ExecuteGoal(ctx, &SwarmFlockingGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*SwarmFlocking_Goal),
	})
}

func (a _SwarmFlockingAction) TypeSupport() <no value>.ActionTypeSupport {
	return SwarmFlockingTypeSupport
}

type SwarmFlockingServer struct{
	*<no value>.ActionServer
}

func NewSwarmFlockingServer(node *<no value>.Node, name string, action SwarmFlockingAction, opts *<no value>.ActionServerOptions) (*SwarmFlockingServer, error) {
	server, err := node.NewActionServer(name, _SwarmFlockingAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &SwarmFlockingServer{server}, nil
}

type SwarmFlockingFeedbackHandler func(context.Context, *SwarmFlocking_FeedbackMessage)

type SwarmFlockingStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type SwarmFlockingClient struct{
	*<no value>.ActionClient
}

func NewSwarmFlockingClient(node *<no value>.Node, name string, opts *<no value>.ActionClientOptions) (*SwarmFlockingClient, error) {
	client, err := node.NewActionClient(name, SwarmFlockingTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &SwarmFlockingClient{client}, nil
}

func (c *SwarmFlockingClient) WatchGoal(ctx context.Context, goal *SwarmFlocking_Goal, onFeedback SwarmFlockingFeedbackHandler) (*SwarmFlocking_GetResult_Response, *<no value>.GoalID, error) {
	var resp <no value>.Message
	var goalID *<no value>.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg <no value>.Message) {
			onFeedback(ctx, msg.(*SwarmFlocking_FeedbackMessage))
		})
	}
	if r, ok := resp.(*SwarmFlocking_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *SwarmFlockingClient) SendGoal(ctx context.Context, goal *SwarmFlocking_Goal) (*SwarmFlocking_SendGoal_Response, *<no value>.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*SwarmFlocking_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *SwarmFlockingClient) SendGoalRequest(ctx context.Context, request *SwarmFlocking_SendGoal_Request) (*SwarmFlocking_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*SwarmFlocking_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *SwarmFlockingClient) GetResult(ctx context.Context, goalID *<no value>.GoalID) (*SwarmFlocking_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*SwarmFlocking_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *SwarmFlockingClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *SwarmFlockingClient) WatchFeedback(ctx context.Context, goalID *<no value>.GoalID, handler SwarmFlockingFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg <no value>.Message) {
		handler(ctx, msg.(*SwarmFlocking_FeedbackMessage))
	})
}

func (c *SwarmFlockingClient) WatchStatus(ctx context.Context, goalID *<no value>.GoalID, handler SwarmFlockingStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg <no value>.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
