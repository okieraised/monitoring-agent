// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/set_arming_state.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/SetArmingState_SendGoal", SetArmingState_SendGoalTypeSupport)
	<no value>.RegisterService("as2_msgs/action/SetArmingState_SendGoal", SetArmingState_SendGoalTypeSupport)
}

type _SetArmingState_SendGoalTypeSupport struct {}

func (s _SetArmingState_SendGoalTypeSupport) Request() <no value>.MessageTypeSupport {
	return SetArmingState_SendGoal_RequestTypeSupport
}

func (s _SetArmingState_SendGoalTypeSupport) Response() <no value>.MessageTypeSupport {
	return SetArmingState_SendGoal_ResponseTypeSupport
}

func (s _SetArmingState_SendGoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__SetArmingState_SendGoal())
}

// Modifying this variable is undefined behavior.
var SetArmingState_SendGoalTypeSupport <no value>.ServiceTypeSupport = _SetArmingState_SendGoalTypeSupport{}

// SetArmingState_SendGoalClient wraps <no value>.Client to provide type safe helper
// functions
type SetArmingState_SendGoalClient struct {
	*<no value>.Client
}

// NewSetArmingState_SendGoalClient creates and returns a new client for the
// SetArmingState_SendGoal
func NewSetArmingState_SendGoalClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*SetArmingState_SendGoalClient, error) {
	client, err := node.NewClient(serviceName, SetArmingState_SendGoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetArmingState_SendGoalClient{client}, nil
}

func (s *SetArmingState_SendGoalClient) Send(ctx context.Context, req *SetArmingState_SendGoal_Request) (*SetArmingState_SendGoal_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetArmingState_SendGoal_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetArmingState_SendGoalServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s SetArmingState_SendGoalServiceResponseSender) SendResponse(resp *SetArmingState_SendGoal_Response) error {
	return s.sender.SendResponse(resp)
}

type SetArmingState_SendGoalServiceRequestHandler func(*<no value>.ServiceInfo, *SetArmingState_SendGoal_Request, SetArmingState_SendGoalServiceResponseSender)

// SetArmingState_SendGoalService wraps <no value>.Service to provide type safe helper
// functions
type SetArmingState_SendGoalService struct {
	*<no value>.Service
}

// NewSetArmingState_SendGoalService creates and returns a new service for the
// SetArmingState_SendGoal
func NewSetArmingState_SendGoalService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler SetArmingState_SendGoalServiceRequestHandler) (*SetArmingState_SendGoalService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*SetArmingState_SendGoal_Request)
		responseSender := SetArmingState_SendGoalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetArmingState_SendGoalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetArmingState_SendGoalService{service}, nil
}