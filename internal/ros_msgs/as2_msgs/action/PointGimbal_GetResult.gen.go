// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/point_gimbal.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/PointGimbal_GetResult", PointGimbal_GetResultTypeSupport)
	<no value>.RegisterService("as2_msgs/action/PointGimbal_GetResult", PointGimbal_GetResultTypeSupport)
}

type _PointGimbal_GetResultTypeSupport struct {}

func (s _PointGimbal_GetResultTypeSupport) Request() <no value>.MessageTypeSupport {
	return PointGimbal_GetResult_RequestTypeSupport
}

func (s _PointGimbal_GetResultTypeSupport) Response() <no value>.MessageTypeSupport {
	return PointGimbal_GetResult_ResponseTypeSupport
}

func (s _PointGimbal_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__PointGimbal_GetResult())
}

// Modifying this variable is undefined behavior.
var PointGimbal_GetResultTypeSupport <no value>.ServiceTypeSupport = _PointGimbal_GetResultTypeSupport{}

// PointGimbal_GetResultClient wraps <no value>.Client to provide type safe helper
// functions
type PointGimbal_GetResultClient struct {
	*<no value>.Client
}

// NewPointGimbal_GetResultClient creates and returns a new client for the
// PointGimbal_GetResult
func NewPointGimbal_GetResultClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*PointGimbal_GetResultClient, error) {
	client, err := node.NewClient(serviceName, PointGimbal_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_GetResultClient{client}, nil
}

func (s *PointGimbal_GetResultClient) Send(ctx context.Context, req *PointGimbal_GetResult_Request) (*PointGimbal_GetResult_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*PointGimbal_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type PointGimbal_GetResultServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s PointGimbal_GetResultServiceResponseSender) SendResponse(resp *PointGimbal_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type PointGimbal_GetResultServiceRequestHandler func(*<no value>.ServiceInfo, *PointGimbal_GetResult_Request, PointGimbal_GetResultServiceResponseSender)

// PointGimbal_GetResultService wraps <no value>.Service to provide type safe helper
// functions
type PointGimbal_GetResultService struct {
	*<no value>.Service
}

// NewPointGimbal_GetResultService creates and returns a new service for the
// PointGimbal_GetResult
func NewPointGimbal_GetResultService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler PointGimbal_GetResultServiceRequestHandler) (*PointGimbal_GetResultService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*PointGimbal_GetResult_Request)
		responseSender := PointGimbal_GetResultServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, PointGimbal_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_GetResultService{service}, nil
}