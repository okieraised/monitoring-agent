// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/add_static_transform_gps.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/AddStaticTransformGps", AddStaticTransformGpsTypeSupport)
	<no value>.RegisterService("as2_msgs/srv/AddStaticTransformGps", AddStaticTransformGpsTypeSupport)
}

type _AddStaticTransformGpsTypeSupport struct {}

func (s _AddStaticTransformGpsTypeSupport) Request() <no value>.MessageTypeSupport {
	return AddStaticTransformGps_RequestTypeSupport
}

func (s _AddStaticTransformGpsTypeSupport) Response() <no value>.MessageTypeSupport {
	return AddStaticTransformGps_ResponseTypeSupport
}

func (s _AddStaticTransformGpsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__AddStaticTransformGps())
}

// Modifying this variable is undefined behavior.
var AddStaticTransformGpsTypeSupport <no value>.ServiceTypeSupport = _AddStaticTransformGpsTypeSupport{}

// AddStaticTransformGpsClient wraps <no value>.Client to provide type safe helper
// functions
type AddStaticTransformGpsClient struct {
	*<no value>.Client
}

// NewAddStaticTransformGpsClient creates and returns a new client for the
// AddStaticTransformGps
func NewAddStaticTransformGpsClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*AddStaticTransformGpsClient, error) {
	client, err := node.NewClient(serviceName, AddStaticTransformGpsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransformGpsClient{client}, nil
}

func (s *AddStaticTransformGpsClient) Send(ctx context.Context, req *AddStaticTransformGps_Request) (*AddStaticTransformGps_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*AddStaticTransformGps_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type AddStaticTransformGpsServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s AddStaticTransformGpsServiceResponseSender) SendResponse(resp *AddStaticTransformGps_Response) error {
	return s.sender.SendResponse(resp)
}

type AddStaticTransformGpsServiceRequestHandler func(*<no value>.ServiceInfo, *AddStaticTransformGps_Request, AddStaticTransformGpsServiceResponseSender)

// AddStaticTransformGpsService wraps <no value>.Service to provide type safe helper
// functions
type AddStaticTransformGpsService struct {
	*<no value>.Service
}

// NewAddStaticTransformGpsService creates and returns a new service for the
// AddStaticTransformGps
func NewAddStaticTransformGpsService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler AddStaticTransformGpsServiceRequestHandler) (*AddStaticTransformGpsService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*AddStaticTransformGps_Request)
		responseSender := AddStaticTransformGpsServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, AddStaticTransformGpsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransformGpsService{service}, nil
}