// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/set_origin.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/SetOrigin", SetOriginTypeSupport)
	<no value>.RegisterService("as2_msgs/srv/SetOrigin", SetOriginTypeSupport)
}

type _SetOriginTypeSupport struct {}

func (s _SetOriginTypeSupport) Request() <no value>.MessageTypeSupport {
	return SetOrigin_RequestTypeSupport
}

func (s _SetOriginTypeSupport) Response() <no value>.MessageTypeSupport {
	return SetOrigin_ResponseTypeSupport
}

func (s _SetOriginTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__SetOrigin())
}

// Modifying this variable is undefined behavior.
var SetOriginTypeSupport <no value>.ServiceTypeSupport = _SetOriginTypeSupport{}

// SetOriginClient wraps <no value>.Client to provide type safe helper
// functions
type SetOriginClient struct {
	*<no value>.Client
}

// NewSetOriginClient creates and returns a new client for the
// SetOrigin
func NewSetOriginClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*SetOriginClient, error) {
	client, err := node.NewClient(serviceName, SetOriginTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetOriginClient{client}, nil
}

func (s *SetOriginClient) Send(ctx context.Context, req *SetOrigin_Request) (*SetOrigin_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetOrigin_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetOriginServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s SetOriginServiceResponseSender) SendResponse(resp *SetOrigin_Response) error {
	return s.sender.SendResponse(resp)
}

type SetOriginServiceRequestHandler func(*<no value>.ServiceInfo, *SetOrigin_Request, SetOriginServiceResponseSender)

// SetOriginService wraps <no value>.Service to provide type safe helper
// functions
type SetOriginService struct {
	*<no value>.Service
}

// NewSetOriginService creates and returns a new service for the
// SetOrigin
func NewSetOriginService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler SetOriginServiceRequestHandler) (*SetOriginService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*SetOrigin_Request)
		responseSender := SetOriginServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetOriginTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetOriginService{service}, nil
}