// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/get_origin.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/GetOrigin", GetOriginTypeSupport)
	<no value>.RegisterService("as2_msgs/srv/GetOrigin", GetOriginTypeSupport)
}

type _GetOriginTypeSupport struct {}

func (s _GetOriginTypeSupport) Request() <no value>.MessageTypeSupport {
	return GetOrigin_RequestTypeSupport
}

func (s _GetOriginTypeSupport) Response() <no value>.MessageTypeSupport {
	return GetOrigin_ResponseTypeSupport
}

func (s _GetOriginTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__GetOrigin())
}

// Modifying this variable is undefined behavior.
var GetOriginTypeSupport <no value>.ServiceTypeSupport = _GetOriginTypeSupport{}

// GetOriginClient wraps <no value>.Client to provide type safe helper
// functions
type GetOriginClient struct {
	*<no value>.Client
}

// NewGetOriginClient creates and returns a new client for the
// GetOrigin
func NewGetOriginClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*GetOriginClient, error) {
	client, err := node.NewClient(serviceName, GetOriginTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetOriginClient{client}, nil
}

func (s *GetOriginClient) Send(ctx context.Context, req *GetOrigin_Request) (*GetOrigin_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetOrigin_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetOriginServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s GetOriginServiceResponseSender) SendResponse(resp *GetOrigin_Response) error {
	return s.sender.SendResponse(resp)
}

type GetOriginServiceRequestHandler func(*<no value>.ServiceInfo, *GetOrigin_Request, GetOriginServiceResponseSender)

// GetOriginService wraps <no value>.Service to provide type safe helper
// functions
type GetOriginService struct {
	*<no value>.Service
}

// NewGetOriginService creates and returns a new service for the
// GetOrigin
func NewGetOriginService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler GetOriginServiceRequestHandler) (*GetOriginService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*GetOrigin_Request)
		responseSender := GetOriginServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetOriginTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetOriginService{service}, nil
}