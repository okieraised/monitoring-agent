// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/add_static_transform.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/AddStaticTransform", AddStaticTransformTypeSupport)
	<no value>.RegisterService("as2_msgs/srv/AddStaticTransform", AddStaticTransformTypeSupport)
}

type _AddStaticTransformTypeSupport struct {}

func (s _AddStaticTransformTypeSupport) Request() <no value>.MessageTypeSupport {
	return AddStaticTransform_RequestTypeSupport
}

func (s _AddStaticTransformTypeSupport) Response() <no value>.MessageTypeSupport {
	return AddStaticTransform_ResponseTypeSupport
}

func (s _AddStaticTransformTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__AddStaticTransform())
}

// Modifying this variable is undefined behavior.
var AddStaticTransformTypeSupport <no value>.ServiceTypeSupport = _AddStaticTransformTypeSupport{}

// AddStaticTransformClient wraps <no value>.Client to provide type safe helper
// functions
type AddStaticTransformClient struct {
	*<no value>.Client
}

// NewAddStaticTransformClient creates and returns a new client for the
// AddStaticTransform
func NewAddStaticTransformClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*AddStaticTransformClient, error) {
	client, err := node.NewClient(serviceName, AddStaticTransformTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransformClient{client}, nil
}

func (s *AddStaticTransformClient) Send(ctx context.Context, req *AddStaticTransform_Request) (*AddStaticTransform_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*AddStaticTransform_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type AddStaticTransformServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s AddStaticTransformServiceResponseSender) SendResponse(resp *AddStaticTransform_Response) error {
	return s.sender.SendResponse(resp)
}

type AddStaticTransformServiceRequestHandler func(*<no value>.ServiceInfo, *AddStaticTransform_Request, AddStaticTransformServiceResponseSender)

// AddStaticTransformService wraps <no value>.Service to provide type safe helper
// functions
type AddStaticTransformService struct {
	*<no value>.Service
}

// NewAddStaticTransformService creates and returns a new service for the
// AddStaticTransform
func NewAddStaticTransformService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler AddStaticTransformServiceRequestHandler) (*AddStaticTransformService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*AddStaticTransform_Request)
		responseSender := AddStaticTransformServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, AddStaticTransformTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransformService{service}, nil
}