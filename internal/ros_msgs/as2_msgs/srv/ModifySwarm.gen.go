// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/modify_swarm.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/ModifySwarm", ModifySwarmTypeSupport)
	<no value>.RegisterService("as2_msgs/srv/ModifySwarm", ModifySwarmTypeSupport)
}

type _ModifySwarmTypeSupport struct {}

func (s _ModifySwarmTypeSupport) Request() <no value>.MessageTypeSupport {
	return ModifySwarm_RequestTypeSupport
}

func (s _ModifySwarmTypeSupport) Response() <no value>.MessageTypeSupport {
	return ModifySwarm_ResponseTypeSupport
}

func (s _ModifySwarmTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__ModifySwarm())
}

// Modifying this variable is undefined behavior.
var ModifySwarmTypeSupport <no value>.ServiceTypeSupport = _ModifySwarmTypeSupport{}

// ModifySwarmClient wraps <no value>.Client to provide type safe helper
// functions
type ModifySwarmClient struct {
	*<no value>.Client
}

// NewModifySwarmClient creates and returns a new client for the
// ModifySwarm
func NewModifySwarmClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*ModifySwarmClient, error) {
	client, err := node.NewClient(serviceName, ModifySwarmTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ModifySwarmClient{client}, nil
}

func (s *ModifySwarmClient) Send(ctx context.Context, req *ModifySwarm_Request) (*ModifySwarm_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ModifySwarm_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ModifySwarmServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s ModifySwarmServiceResponseSender) SendResponse(resp *ModifySwarm_Response) error {
	return s.sender.SendResponse(resp)
}

type ModifySwarmServiceRequestHandler func(*<no value>.ServiceInfo, *ModifySwarm_Request, ModifySwarmServiceResponseSender)

// ModifySwarmService wraps <no value>.Service to provide type safe helper
// functions
type ModifySwarmService struct {
	*<no value>.Service
}

// NewModifySwarmService creates and returns a new service for the
// ModifySwarm
func NewModifySwarmService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler ModifySwarmServiceRequestHandler) (*ModifySwarmService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*ModifySwarm_Request)
		responseSender := ModifySwarmServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ModifySwarmTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ModifySwarmService{service}, nil
}