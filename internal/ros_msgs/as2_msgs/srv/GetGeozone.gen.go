// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/get_geozone.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("as2_msgs/GetGeozone", GetGeozoneTypeSupport)
	<no value>.RegisterService("as2_msgs/srv/GetGeozone", GetGeozoneTypeSupport)
}

type _GetGeozoneTypeSupport struct {}

func (s _GetGeozoneTypeSupport) Request() <no value>.MessageTypeSupport {
	return GetGeozone_RequestTypeSupport
}

func (s _GetGeozoneTypeSupport) Response() <no value>.MessageTypeSupport {
	return GetGeozone_ResponseTypeSupport
}

func (s _GetGeozoneTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__GetGeozone())
}

// Modifying this variable is undefined behavior.
var GetGeozoneTypeSupport <no value>.ServiceTypeSupport = _GetGeozoneTypeSupport{}

// GetGeozoneClient wraps <no value>.Client to provide type safe helper
// functions
type GetGeozoneClient struct {
	*<no value>.Client
}

// NewGetGeozoneClient creates and returns a new client for the
// GetGeozone
func NewGetGeozoneClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*GetGeozoneClient, error) {
	client, err := node.NewClient(serviceName, GetGeozoneTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetGeozoneClient{client}, nil
}

func (s *GetGeozoneClient) Send(ctx context.Context, req *GetGeozone_Request) (*GetGeozone_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetGeozone_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetGeozoneServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s GetGeozoneServiceResponseSender) SendResponse(resp *GetGeozone_Response) error {
	return s.sender.SendResponse(resp)
}

type GetGeozoneServiceRequestHandler func(*<no value>.ServiceInfo, *GetGeozone_Request, GetGeozoneServiceResponseSender)

// GetGeozoneService wraps <no value>.Service to provide type safe helper
// functions
type GetGeozoneService struct {
	*<no value>.Service
}

// NewGetGeozoneService creates and returns a new service for the
// GetGeozone
func NewGetGeozoneService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler GetGeozoneServiceRequestHandler) (*GetGeozoneService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*GetGeozone_Request)
		responseSender := GetGeozoneServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetGeozoneTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetGeozoneService{service}, nil
}