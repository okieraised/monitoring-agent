// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <geographic_msgs/srv/get_geographic_map.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("geographic_msgs/GetGeographicMap", GetGeographicMapTypeSupport)
	<no value>.RegisterService("geographic_msgs/srv/GetGeographicMap", GetGeographicMapTypeSupport)
}

type _GetGeographicMapTypeSupport struct {}

func (s _GetGeographicMapTypeSupport) Request() <no value>.MessageTypeSupport {
	return GetGeographicMap_RequestTypeSupport
}

func (s _GetGeographicMapTypeSupport) Response() <no value>.MessageTypeSupport {
	return GetGeographicMap_ResponseTypeSupport
}

func (s _GetGeographicMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__geographic_msgs__srv__GetGeographicMap())
}

// Modifying this variable is undefined behavior.
var GetGeographicMapTypeSupport <no value>.ServiceTypeSupport = _GetGeographicMapTypeSupport{}

// GetGeographicMapClient wraps <no value>.Client to provide type safe helper
// functions
type GetGeographicMapClient struct {
	*<no value>.Client
}

// NewGetGeographicMapClient creates and returns a new client for the
// GetGeographicMap
func NewGetGeographicMapClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*GetGeographicMapClient, error) {
	client, err := node.NewClient(serviceName, GetGeographicMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetGeographicMapClient{client}, nil
}

func (s *GetGeographicMapClient) Send(ctx context.Context, req *GetGeographicMap_Request) (*GetGeographicMap_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetGeographicMap_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetGeographicMapServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s GetGeographicMapServiceResponseSender) SendResponse(resp *GetGeographicMap_Response) error {
	return s.sender.SendResponse(resp)
}

type GetGeographicMapServiceRequestHandler func(*<no value>.ServiceInfo, *GetGeographicMap_Request, GetGeographicMapServiceResponseSender)

// GetGeographicMapService wraps <no value>.Service to provide type safe helper
// functions
type GetGeographicMapService struct {
	*<no value>.Service
}

// NewGetGeographicMapService creates and returns a new service for the
// GetGeographicMap
func NewGetGeographicMapService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler GetGeographicMapServiceRequestHandler) (*GetGeographicMapService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*GetGeographicMap_Request)
		responseSender := GetGeographicMapServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetGeographicMapTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetGeographicMapService{service}, nil
}