// Code generated by ros2gen. DO NOT EDIT.

package rmw_dds_common_msg
import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	primitives "github.com/okieraised/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rmw_dds_common/msg/node_entities_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rmw_dds_common/NodeEntitiesInfo", NodeEntitiesInfoTypeSupport)
	typemap.RegisterMessage("rmw_dds_common/msg/NodeEntitiesInfo", NodeEntitiesInfoTypeSupport)
}

type NodeEntitiesInfo struct {
	NodeNamespace string `yaml:"node_namespace"`
	NodeName string `yaml:"node_name"`
	ReaderGidSeq []Gid `yaml:"reader_gid_seq"`
	WriterGidSeq []Gid `yaml:"writer_gid_seq"`
}

// NewNodeEntitiesInfo creates a new NodeEntitiesInfo with default values.
func NewNodeEntitiesInfo() *NodeEntitiesInfo {
	self := NodeEntitiesInfo{}
	self.SetDefaults()
	return &self
}

func (t *NodeEntitiesInfo) Clone() *NodeEntitiesInfo {
	c := &NodeEntitiesInfo{}
	c.NodeNamespace = t.NodeNamespace
	c.NodeName = t.NodeName
	if t.ReaderGidSeq != nil {
		c.ReaderGidSeq = make([]Gid, len(t.ReaderGidSeq))
		CloneGidSlice(c.ReaderGidSeq, t.ReaderGidSeq)
	}
	if t.WriterGidSeq != nil {
		c.WriterGidSeq = make([]Gid, len(t.WriterGidSeq))
		CloneGidSlice(c.WriterGidSeq, t.WriterGidSeq)
	}
	return c
}

func (t *NodeEntitiesInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NodeEntitiesInfo) SetDefaults() {
	t.NodeNamespace = ""
	t.NodeName = ""
	t.ReaderGidSeq = nil
	t.WriterGidSeq = nil
}

func (t *NodeEntitiesInfo) GetTypeSupport() types.MessageTypeSupport {
	return NodeEntitiesInfoTypeSupport
}

// NodeEntitiesInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type NodeEntitiesInfoPublisher struct {
	*rclgo.Publisher
}

// NewNodeEntitiesInfoPublisher creates and returns a new publisher for the
// NodeEntitiesInfo
func NewNodeEntitiesInfoPublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*NodeEntitiesInfoPublisher, error) {
	pub, err := node.NewPublisher(topicName, NodeEntitiesInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NodeEntitiesInfoPublisher{pub}, nil
}

func (p *NodeEntitiesInfoPublisher) Publish(msg *NodeEntitiesInfo) error {
	return p.Publisher.Publish(msg)
}

// NodeEntitiesInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type NodeEntitiesInfoSubscription struct {
	*rclgo.Subscription
}

// NodeEntitiesInfoSubscriptionCallback type is used to provide a subscription
// handler function for a NodeEntitiesInfoSubscription.
type NodeEntitiesInfoSubscriptionCallback func(msg *NodeEntitiesInfo, info *rclgo.MessageInfo, err error)

// NewNodeEntitiesInfoSubscription creates and returns a new subscription for the
// NodeEntitiesInfo
func NewNodeEntitiesInfoSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback NodeEntitiesInfoSubscriptionCallback) (*NodeEntitiesInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg NodeEntitiesInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, NodeEntitiesInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NodeEntitiesInfoSubscription{sub}, nil
}

func (s *NodeEntitiesInfoSubscription) TakeMessage(out *NodeEntitiesInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNodeEntitiesInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNodeEntitiesInfoSlice(dst, src []NodeEntitiesInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NodeEntitiesInfoTypeSupport types.MessageTypeSupport = _NodeEntitiesInfoTypeSupport{}

type _NodeEntitiesInfoTypeSupport struct{}

func (t _NodeEntitiesInfoTypeSupport) New() types.Message {
	return NewNodeEntitiesInfo()
}

func (t _NodeEntitiesInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rmw_dds_common__msg__NodeEntitiesInfo
	return (unsafe.Pointer)(C.rmw_dds_common__msg__NodeEntitiesInfo__create())
}

func (t _NodeEntitiesInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rmw_dds_common__msg__NodeEntitiesInfo__destroy((*C.rmw_dds_common__msg__NodeEntitiesInfo)(pointer_to_free))
}

func (t _NodeEntitiesInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NodeEntitiesInfo)
	mem := (*C.rmw_dds_common__msg__NodeEntitiesInfo)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.node_namespace), m.NodeNamespace)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.node_name), m.NodeName)
	GidSequenceToC(&mem.reader_gid_seq, m.ReaderGidSeq)
	GidSequenceToC(&mem.writer_gid_seq, m.WriterGidSeq)
}

func (t _NodeEntitiesInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NodeEntitiesInfo)
	mem := (*C.rmw_dds_common__msg__NodeEntitiesInfo)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.NodeNamespace, unsafe.Pointer(&mem.node_namespace))
	primitives.StringAsGoStruct(&m.NodeName, unsafe.Pointer(&mem.node_name))
	GidSequenceToGo(&m.ReaderGidSeq, mem.reader_gid_seq)
	GidSequenceToGo(&m.WriterGidSeq, mem.writer_gid_seq)
}

func (t _NodeEntitiesInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rmw_dds_common__msg__NodeEntitiesInfo())
}

type CNodeEntitiesInfo = C.rmw_dds_common__msg__NodeEntitiesInfo
type CNodeEntitiesInfoSequence = C.rmw_dds_common__msg__NodeEntitiesInfo__Sequence

func NodeEntitiesInfoSequenceToGo(goSlice *[]NodeEntitiesInfo, cSlice CNodeEntitiesInfoSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NodeEntitiesInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NodeEntitiesInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func NodeEntitiesInfoSequenceToC(cSlice *CNodeEntitiesInfoSequence, goSlice []NodeEntitiesInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rmw_dds_common__msg__NodeEntitiesInfo)(C.malloc(C.sizeof_struct_rmw_dds_common__msg__NodeEntitiesInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NodeEntitiesInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func NodeEntitiesInfoArrayToGo(goSlice []NodeEntitiesInfo, cSlice []CNodeEntitiesInfo) {
	for i := 0; i < len(cSlice); i++ {
		NodeEntitiesInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func NodeEntitiesInfoArrayToC(cSlice []CNodeEntitiesInfo, goSlice []NodeEntitiesInfo) {
	for i := 0; i < len(goSlice); i++ {
		NodeEntitiesInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
