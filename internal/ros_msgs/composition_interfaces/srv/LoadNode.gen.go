// Code generated by ros2gen. DO NOT EDIT.

package composition_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <composition_interfaces/srv/load_node.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("composition_interfaces/LoadNode", LoadNodeTypeSupport)
	<no value>.RegisterService("composition_interfaces/srv/LoadNode", LoadNodeTypeSupport)
}

type _LoadNodeTypeSupport struct {}

func (s _LoadNodeTypeSupport) Request() <no value>.MessageTypeSupport {
	return LoadNode_RequestTypeSupport
}

func (s _LoadNodeTypeSupport) Response() <no value>.MessageTypeSupport {
	return LoadNode_ResponseTypeSupport
}

func (s _LoadNodeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__composition_interfaces__srv__LoadNode())
}

// Modifying this variable is undefined behavior.
var LoadNodeTypeSupport <no value>.ServiceTypeSupport = _LoadNodeTypeSupport{}

// LoadNodeClient wraps <no value>.Client to provide type safe helper
// functions
type LoadNodeClient struct {
	*<no value>.Client
}

// NewLoadNodeClient creates and returns a new client for the
// LoadNode
func NewLoadNodeClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*LoadNodeClient, error) {
	client, err := node.NewClient(serviceName, LoadNodeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoadNodeClient{client}, nil
}

func (s *LoadNodeClient) Send(ctx context.Context, req *LoadNode_Request) (*LoadNode_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*LoadNode_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type LoadNodeServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s LoadNodeServiceResponseSender) SendResponse(resp *LoadNode_Response) error {
	return s.sender.SendResponse(resp)
}

type LoadNodeServiceRequestHandler func(*<no value>.ServiceInfo, *LoadNode_Request, LoadNodeServiceResponseSender)

// LoadNodeService wraps <no value>.Service to provide type safe helper
// functions
type LoadNodeService struct {
	*<no value>.Service
}

// NewLoadNodeService creates and returns a new service for the
// LoadNode
func NewLoadNodeService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler LoadNodeServiceRequestHandler) (*LoadNodeService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*LoadNode_Request)
		responseSender := LoadNodeServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, LoadNodeTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &LoadNodeService{service}, nil
}