// Code generated by ros2gen. DO NOT EDIT.

package composition_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <composition_interfaces/srv/unload_node.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("composition_interfaces/UnloadNode", UnloadNodeTypeSupport)
	<no value>.RegisterService("composition_interfaces/srv/UnloadNode", UnloadNodeTypeSupport)
}

type _UnloadNodeTypeSupport struct {}

func (s _UnloadNodeTypeSupport) Request() <no value>.MessageTypeSupport {
	return UnloadNode_RequestTypeSupport
}

func (s _UnloadNodeTypeSupport) Response() <no value>.MessageTypeSupport {
	return UnloadNode_ResponseTypeSupport
}

func (s _UnloadNodeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__composition_interfaces__srv__UnloadNode())
}

// Modifying this variable is undefined behavior.
var UnloadNodeTypeSupport <no value>.ServiceTypeSupport = _UnloadNodeTypeSupport{}

// UnloadNodeClient wraps <no value>.Client to provide type safe helper
// functions
type UnloadNodeClient struct {
	*<no value>.Client
}

// NewUnloadNodeClient creates and returns a new client for the
// UnloadNode
func NewUnloadNodeClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*UnloadNodeClient, error) {
	client, err := node.NewClient(serviceName, UnloadNodeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UnloadNodeClient{client}, nil
}

func (s *UnloadNodeClient) Send(ctx context.Context, req *UnloadNode_Request) (*UnloadNode_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*UnloadNode_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type UnloadNodeServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s UnloadNodeServiceResponseSender) SendResponse(resp *UnloadNode_Response) error {
	return s.sender.SendResponse(resp)
}

type UnloadNodeServiceRequestHandler func(*<no value>.ServiceInfo, *UnloadNode_Request, UnloadNodeServiceResponseSender)

// UnloadNodeService wraps <no value>.Service to provide type safe helper
// functions
type UnloadNodeService struct {
	*<no value>.Service
}

// NewUnloadNodeService creates and returns a new service for the
// UnloadNode
func NewUnloadNodeService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler UnloadNodeServiceRequestHandler) (*UnloadNodeService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*UnloadNode_Request)
		responseSender := UnloadNodeServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, UnloadNodeTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &UnloadNodeService{service}, nil
}