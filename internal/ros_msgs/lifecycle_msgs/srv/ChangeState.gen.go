// Code generated by ros2gen. DO NOT EDIT.

package lifecycle_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <lifecycle_msgs/srv/change_state.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("lifecycle_msgs/ChangeState", ChangeStateTypeSupport)
	<no value>.RegisterService("lifecycle_msgs/srv/ChangeState", ChangeStateTypeSupport)
}

type _ChangeStateTypeSupport struct {}

func (s _ChangeStateTypeSupport) Request() <no value>.MessageTypeSupport {
	return ChangeState_RequestTypeSupport
}

func (s _ChangeStateTypeSupport) Response() <no value>.MessageTypeSupport {
	return ChangeState_ResponseTypeSupport
}

func (s _ChangeStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__ChangeState())
}

// Modifying this variable is undefined behavior.
var ChangeStateTypeSupport <no value>.ServiceTypeSupport = _ChangeStateTypeSupport{}

// ChangeStateClient wraps <no value>.Client to provide type safe helper
// functions
type ChangeStateClient struct {
	*<no value>.Client
}

// NewChangeStateClient creates and returns a new client for the
// ChangeState
func NewChangeStateClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*ChangeStateClient, error) {
	client, err := node.NewClient(serviceName, ChangeStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ChangeStateClient{client}, nil
}

func (s *ChangeStateClient) Send(ctx context.Context, req *ChangeState_Request) (*ChangeState_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ChangeState_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ChangeStateServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s ChangeStateServiceResponseSender) SendResponse(resp *ChangeState_Response) error {
	return s.sender.SendResponse(resp)
}

type ChangeStateServiceRequestHandler func(*<no value>.ServiceInfo, *ChangeState_Request, ChangeStateServiceResponseSender)

// ChangeStateService wraps <no value>.Service to provide type safe helper
// functions
type ChangeStateService struct {
	*<no value>.Service
}

// NewChangeStateService creates and returns a new service for the
// ChangeState
func NewChangeStateService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler ChangeStateServiceRequestHandler) (*ChangeStateService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*ChangeState_Request)
		responseSender := ChangeStateServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ChangeStateTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ChangeStateService{service}, nil
}