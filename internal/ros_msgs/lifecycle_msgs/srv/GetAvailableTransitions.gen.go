// Code generated by ros2gen. DO NOT EDIT.

package lifecycle_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <lifecycle_msgs/srv/get_available_transitions.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("lifecycle_msgs/GetAvailableTransitions", GetAvailableTransitionsTypeSupport)
	<no value>.RegisterService("lifecycle_msgs/srv/GetAvailableTransitions", GetAvailableTransitionsTypeSupport)
}

type _GetAvailableTransitionsTypeSupport struct {}

func (s _GetAvailableTransitionsTypeSupport) Request() <no value>.MessageTypeSupport {
	return GetAvailableTransitions_RequestTypeSupport
}

func (s _GetAvailableTransitionsTypeSupport) Response() <no value>.MessageTypeSupport {
	return GetAvailableTransitions_ResponseTypeSupport
}

func (s _GetAvailableTransitionsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions())
}

// Modifying this variable is undefined behavior.
var GetAvailableTransitionsTypeSupport <no value>.ServiceTypeSupport = _GetAvailableTransitionsTypeSupport{}

// GetAvailableTransitionsClient wraps <no value>.Client to provide type safe helper
// functions
type GetAvailableTransitionsClient struct {
	*<no value>.Client
}

// NewGetAvailableTransitionsClient creates and returns a new client for the
// GetAvailableTransitions
func NewGetAvailableTransitionsClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*GetAvailableTransitionsClient, error) {
	client, err := node.NewClient(serviceName, GetAvailableTransitionsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitionsClient{client}, nil
}

func (s *GetAvailableTransitionsClient) Send(ctx context.Context, req *GetAvailableTransitions_Request) (*GetAvailableTransitions_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetAvailableTransitions_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetAvailableTransitionsServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s GetAvailableTransitionsServiceResponseSender) SendResponse(resp *GetAvailableTransitions_Response) error {
	return s.sender.SendResponse(resp)
}

type GetAvailableTransitionsServiceRequestHandler func(*<no value>.ServiceInfo, *GetAvailableTransitions_Request, GetAvailableTransitionsServiceResponseSender)

// GetAvailableTransitionsService wraps <no value>.Service to provide type safe helper
// functions
type GetAvailableTransitionsService struct {
	*<no value>.Service
}

// NewGetAvailableTransitionsService creates and returns a new service for the
// GetAvailableTransitions
func NewGetAvailableTransitionsService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler GetAvailableTransitionsServiceRequestHandler) (*GetAvailableTransitionsService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*GetAvailableTransitions_Request)
		responseSender := GetAvailableTransitionsServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetAvailableTransitionsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitionsService{service}, nil
}