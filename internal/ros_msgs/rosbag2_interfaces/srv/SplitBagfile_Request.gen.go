// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/split_bagfile.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/SplitBagfile_Request", SplitBagfile_RequestTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/SplitBagfile_Request", SplitBagfile_RequestTypeSupport)
}

type SplitBagfile_Request struct {
}

// NewSplitBagfile_Request creates a new SplitBagfile_Request with default values.
func NewSplitBagfile_Request() *SplitBagfile_Request {
	self := SplitBagfile_Request{}
	self.SetDefaults()
	return &self
}

func (t *SplitBagfile_Request) Clone() *SplitBagfile_Request {
	c := &SplitBagfile_Request{}
	return c
}

func (t *SplitBagfile_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SplitBagfile_Request) SetDefaults() {
}

func (t *SplitBagfile_Request) GetTypeSupport() types.MessageTypeSupport {
	return SplitBagfile_RequestTypeSupport
}

// SplitBagfile_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SplitBagfile_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSplitBagfile_RequestPublisher creates and returns a new publisher for the
// SplitBagfile_Request
func NewSplitBagfile_RequestPublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*SplitBagfile_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, SplitBagfile_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SplitBagfile_RequestPublisher{pub}, nil
}

func (p *SplitBagfile_RequestPublisher) Publish(msg *SplitBagfile_Request) error {
	return p.Publisher.Publish(msg)
}

// SplitBagfile_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SplitBagfile_RequestSubscription struct {
	*rclgo.Subscription
}

// SplitBagfile_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SplitBagfile_RequestSubscription.
type SplitBagfile_RequestSubscriptionCallback func(msg *SplitBagfile_Request, info *rclgo.MessageInfo, err error)

// NewSplitBagfile_RequestSubscription creates and returns a new subscription for the
// SplitBagfile_Request
func NewSplitBagfile_RequestSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback SplitBagfile_RequestSubscriptionCallback) (*SplitBagfile_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SplitBagfile_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SplitBagfile_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SplitBagfile_RequestSubscription{sub}, nil
}

func (s *SplitBagfile_RequestSubscription) TakeMessage(out *SplitBagfile_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSplitBagfile_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSplitBagfile_RequestSlice(dst, src []SplitBagfile_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SplitBagfile_RequestTypeSupport types.MessageTypeSupport = _SplitBagfile_RequestTypeSupport{}

type _SplitBagfile_RequestTypeSupport struct{}

func (t _SplitBagfile_RequestTypeSupport) New() types.Message {
	return NewSplitBagfile_Request()
}

func (t _SplitBagfile_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__SplitBagfile_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__SplitBagfile_Request__create())
}

func (t _SplitBagfile_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__SplitBagfile_Request__destroy((*C.rosbag2_interfaces__srv__SplitBagfile_Request)(pointer_to_free))
}

func (t _SplitBagfile_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {

}

func (t _SplitBagfile_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _SplitBagfile_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__SplitBagfile_Request())
}

type CSplitBagfile_Request = C.rosbag2_interfaces__srv__SplitBagfile_Request
type CSplitBagfile_RequestSequence = C.rosbag2_interfaces__srv__SplitBagfile_Request__Sequence

func SplitBagfile_RequestSequenceToGo(goSlice *[]SplitBagfile_Request, cSlice CSplitBagfile_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SplitBagfile_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SplitBagfile_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SplitBagfile_RequestSequenceToC(cSlice *CSplitBagfile_RequestSequence, goSlice []SplitBagfile_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__SplitBagfile_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__SplitBagfile_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SplitBagfile_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SplitBagfile_RequestArrayToGo(goSlice []SplitBagfile_Request, cSlice []CSplitBagfile_Request) {
	for i := 0; i < len(cSlice); i++ {
		SplitBagfile_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SplitBagfile_RequestArrayToC(cSlice []CSplitBagfile_Request, goSlice []SplitBagfile_Request) {
	for i := 0; i < len(goSlice); i++ {
		SplitBagfile_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
