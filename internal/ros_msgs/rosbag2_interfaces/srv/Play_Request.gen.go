// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/play.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/Play_Request", Play_RequestTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/Play_Request", Play_RequestTypeSupport)
}

type Play_Request struct {
	StartOffset            builtin_interfaces_msg.Time     `yaml:"start_offset"`             // See rosbag2_transport::PlayOptions::start_offset
	PlaybackDuration       builtin_interfaces_msg.Duration `yaml:"playback_duration"`        // See rosbag2_transport::PlayOptions::playback_duration
	PlaybackUntilTimestamp builtin_interfaces_msg.Time     `yaml:"playback_until_timestamp"` // See rosbag2_transport::PlayOptions::playback_until_timestamp
}

// NewPlay_Request creates a new Play_Request with default values.
func NewPlay_Request() *Play_Request {
	self := Play_Request{}
	self.SetDefaults()
	return &self
}

func (t *Play_Request) Clone() *Play_Request {
	c := &Play_Request{}
	c.StartOffset = *t.StartOffset.Clone()
	c.PlaybackDuration = *t.PlaybackDuration.Clone()
	c.PlaybackUntilTimestamp = *t.PlaybackUntilTimestamp.Clone()
	return c
}

func (t *Play_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Play_Request) SetDefaults() {
	t.StartOffset.SetDefaults()
	t.PlaybackDuration.SetDefaults()
	t.PlaybackUntilTimestamp.SetDefaults()
}

func (t *Play_Request) GetTypeSupport() types.MessageTypeSupport {
	return Play_RequestTypeSupport
}

// Play_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Play_RequestPublisher struct {
	*rclgo.Publisher
}

// NewPlay_RequestPublisher creates and returns a new publisher for the
// Play_Request
func NewPlay_RequestPublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*Play_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, Play_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Play_RequestPublisher{pub}, nil
}

func (p *Play_RequestPublisher) Publish(msg *Play_Request) error {
	return p.Publisher.Publish(msg)
}

// Play_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Play_RequestSubscription struct {
	*rclgo.Subscription
}

// Play_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a Play_RequestSubscription.
type Play_RequestSubscriptionCallback func(msg *Play_Request, info *rclgo.MessageInfo, err error)

// NewPlay_RequestSubscription creates and returns a new subscription for the
// Play_Request
func NewPlay_RequestSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback Play_RequestSubscriptionCallback) (*Play_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Play_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Play_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Play_RequestSubscription{sub}, nil
}

func (s *Play_RequestSubscription) TakeMessage(out *Play_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePlay_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePlay_RequestSlice(dst, src []Play_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Play_RequestTypeSupport types.MessageTypeSupport = _Play_RequestTypeSupport{}

type _Play_RequestTypeSupport struct{}

func (t _Play_RequestTypeSupport) New() types.Message {
	return NewPlay_Request()
}

func (t _Play_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Play_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Play_Request__create())
}

func (t _Play_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Play_Request__destroy((*C.rosbag2_interfaces__srv__Play_Request)(pointer_to_free))
}

func (t _Play_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Play_Request)
	mem := (*C.rosbag2_interfaces__srv__Play_Request)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.start_offset), &m.StartOffset)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.playback_duration), &m.PlaybackDuration)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.playback_until_timestamp), &m.PlaybackUntilTimestamp)
}

func (t _Play_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Play_Request)
	mem := (*C.rosbag2_interfaces__srv__Play_Request)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.StartOffset, unsafe.Pointer(&mem.start_offset))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.PlaybackDuration, unsafe.Pointer(&mem.playback_duration))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.PlaybackUntilTimestamp, unsafe.Pointer(&mem.playback_until_timestamp))
}

func (t _Play_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Play_Request())
}

type CPlay_Request = C.rosbag2_interfaces__srv__Play_Request
type CPlay_RequestSequence = C.rosbag2_interfaces__srv__Play_Request__Sequence

func Play_RequestSequenceToGo(goSlice *[]Play_Request, cSlice CPlay_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Play_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Play_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Play_RequestSequenceToC(cSlice *CPlay_RequestSequence, goSlice []Play_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Play_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Play_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Play_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Play_RequestArrayToGo(goSlice []Play_Request, cSlice []CPlay_Request) {
	for i := 0; i < len(cSlice); i++ {
		Play_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Play_RequestArrayToC(cSlice []CPlay_Request, goSlice []Play_Request) {
	for i := 0; i < len(goSlice); i++ {
		Play_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
