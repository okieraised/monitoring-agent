// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/stop.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rosbag2_interfaces/Stop", StopTypeSupport)
	typemap.RegisterService("rosbag2_interfaces/srv/Stop", StopTypeSupport)
}

type _StopTypeSupport struct{}

func (s _StopTypeSupport) Request() types.MessageTypeSupport {
	return Stop_RequestTypeSupport
}

func (s _StopTypeSupport) Response() types.MessageTypeSupport {
	return Stop_ResponseTypeSupport
}

func (s _StopTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__Stop())
}

// Modifying this variable is undefined behavior.
var StopTypeSupport types.ServiceTypeSupport = _StopTypeSupport{}

// StopClient wraps rclgo.Client to provide type safe helper
// functions
type StopClient struct {
	*rclgo.Client
}

// NewStopClient creates and returns a new client for the
// Stop
func NewStopClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*StopClient, error) {
	client, err := node.NewClient(serviceName, StopTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StopClient{client}, nil
}

func (s *StopClient) Send(ctx context.Context, req *Stop_Request) (*Stop_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*Stop_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type StopServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s StopServiceResponseSender) SendResponse(resp *Stop_Response) error {
	return s.sender.SendResponse(resp)
}

type StopServiceRequestHandler func(*rclgo.ServiceInfo, *Stop_Request, StopServiceResponseSender)

// StopService wraps rclgo.Service to provide type safe helper
// functions
type StopService struct {
	*rclgo.Service
}

// NewStopService creates and returns a new service for the
// Stop
func NewStopService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler StopServiceRequestHandler) (*StopService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*Stop_Request)
		responseSender := StopServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, StopTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &StopService{service}, nil
}
