// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/play_next.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("rosbag2_interfaces/PlayNext", PlayNextTypeSupport)
	<no value>.RegisterService("rosbag2_interfaces/srv/PlayNext", PlayNextTypeSupport)
}

type _PlayNextTypeSupport struct {}

func (s _PlayNextTypeSupport) Request() <no value>.MessageTypeSupport {
	return PlayNext_RequestTypeSupport
}

func (s _PlayNextTypeSupport) Response() <no value>.MessageTypeSupport {
	return PlayNext_ResponseTypeSupport
}

func (s _PlayNextTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__PlayNext())
}

// Modifying this variable is undefined behavior.
var PlayNextTypeSupport <no value>.ServiceTypeSupport = _PlayNextTypeSupport{}

// PlayNextClient wraps <no value>.Client to provide type safe helper
// functions
type PlayNextClient struct {
	*<no value>.Client
}

// NewPlayNextClient creates and returns a new client for the
// PlayNext
func NewPlayNextClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*PlayNextClient, error) {
	client, err := node.NewClient(serviceName, PlayNextTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PlayNextClient{client}, nil
}

func (s *PlayNextClient) Send(ctx context.Context, req *PlayNext_Request) (*PlayNext_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*PlayNext_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type PlayNextServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s PlayNextServiceResponseSender) SendResponse(resp *PlayNext_Response) error {
	return s.sender.SendResponse(resp)
}

type PlayNextServiceRequestHandler func(*<no value>.ServiceInfo, *PlayNext_Request, PlayNextServiceResponseSender)

// PlayNextService wraps <no value>.Service to provide type safe helper
// functions
type PlayNextService struct {
	*<no value>.Service
}

// NewPlayNextService creates and returns a new service for the
// PlayNext
func NewPlayNextService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler PlayNextServiceRequestHandler) (*PlayNextService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*PlayNext_Request)
		responseSender := PlayNextServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, PlayNextTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &PlayNextService{service}, nil
}