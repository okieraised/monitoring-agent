// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/split_bagfile.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rosbag2_interfaces/SplitBagfile", SplitBagfileTypeSupport)
	typemap.RegisterService("rosbag2_interfaces/srv/SplitBagfile", SplitBagfileTypeSupport)
}

type _SplitBagfileTypeSupport struct{}

func (s _SplitBagfileTypeSupport) Request() types.MessageTypeSupport {
	return SplitBagfile_RequestTypeSupport
}

func (s _SplitBagfileTypeSupport) Response() types.MessageTypeSupport {
	return SplitBagfile_ResponseTypeSupport
}

func (s _SplitBagfileTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__SplitBagfile())
}

// Modifying this variable is undefined behavior.
var SplitBagfileTypeSupport types.ServiceTypeSupport = _SplitBagfileTypeSupport{}

// SplitBagfileClient wraps rclgo.Client to provide type safe helper
// functions
type SplitBagfileClient struct {
	*rclgo.Client
}

// NewSplitBagfileClient creates and returns a new client for the
// SplitBagfile
func NewSplitBagfileClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SplitBagfileClient, error) {
	client, err := node.NewClient(serviceName, SplitBagfileTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SplitBagfileClient{client}, nil
}

func (s *SplitBagfileClient) Send(ctx context.Context, req *SplitBagfile_Request) (*SplitBagfile_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SplitBagfile_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SplitBagfileServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SplitBagfileServiceResponseSender) SendResponse(resp *SplitBagfile_Response) error {
	return s.sender.SendResponse(resp)
}

type SplitBagfileServiceRequestHandler func(*rclgo.ServiceInfo, *SplitBagfile_Request, SplitBagfileServiceResponseSender)

// SplitBagfileService wraps rclgo.Service to provide type safe helper
// functions
type SplitBagfileService struct {
	*rclgo.Service
}

// NewSplitBagfileService creates and returns a new service for the
// SplitBagfile
func NewSplitBagfileService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SplitBagfileServiceRequestHandler) (*SplitBagfileService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SplitBagfile_Request)
		responseSender := SplitBagfileServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SplitBagfileTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SplitBagfileService{service}, nil
}
