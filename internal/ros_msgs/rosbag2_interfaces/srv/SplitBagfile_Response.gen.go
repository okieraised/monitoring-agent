// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/split_bagfile.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/SplitBagfile_Response", SplitBagfile_ResponseTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/SplitBagfile_Response", SplitBagfile_ResponseTypeSupport)
}

type SplitBagfile_Response struct {
}

// NewSplitBagfile_Response creates a new SplitBagfile_Response with default values.
func NewSplitBagfile_Response() *SplitBagfile_Response {
	self := SplitBagfile_Response{}
	self.SetDefaults()
	return &self
}

func (t *SplitBagfile_Response) Clone() *SplitBagfile_Response {
	c := &SplitBagfile_Response{}
	return c
}

func (t *SplitBagfile_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SplitBagfile_Response) SetDefaults() {
}

func (t *SplitBagfile_Response) GetTypeSupport() types.MessageTypeSupport {
	return SplitBagfile_ResponseTypeSupport
}

// SplitBagfile_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SplitBagfile_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewSplitBagfile_ResponsePublisher creates and returns a new publisher for the
// SplitBagfile_Response
func NewSplitBagfile_ResponsePublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*SplitBagfile_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, SplitBagfile_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SplitBagfile_ResponsePublisher{pub}, nil
}

func (p *SplitBagfile_ResponsePublisher) Publish(msg *SplitBagfile_Response) error {
	return p.Publisher.Publish(msg)
}

// SplitBagfile_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SplitBagfile_ResponseSubscription struct {
	*rclgo.Subscription
}

// SplitBagfile_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SplitBagfile_ResponseSubscription.
type SplitBagfile_ResponseSubscriptionCallback func(msg *SplitBagfile_Response, info *rclgo.MessageInfo, err error)

// NewSplitBagfile_ResponseSubscription creates and returns a new subscription for the
// SplitBagfile_Response
func NewSplitBagfile_ResponseSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback SplitBagfile_ResponseSubscriptionCallback) (*SplitBagfile_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SplitBagfile_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SplitBagfile_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SplitBagfile_ResponseSubscription{sub}, nil
}

func (s *SplitBagfile_ResponseSubscription) TakeMessage(out *SplitBagfile_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSplitBagfile_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSplitBagfile_ResponseSlice(dst, src []SplitBagfile_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SplitBagfile_ResponseTypeSupport types.MessageTypeSupport = _SplitBagfile_ResponseTypeSupport{}

type _SplitBagfile_ResponseTypeSupport struct{}

func (t _SplitBagfile_ResponseTypeSupport) New() types.Message {
	return NewSplitBagfile_Response()
}

func (t _SplitBagfile_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__SplitBagfile_Response
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__SplitBagfile_Response__create())
}

func (t _SplitBagfile_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__SplitBagfile_Response__destroy((*C.rosbag2_interfaces__srv__SplitBagfile_Response)(pointer_to_free))
}

func (t _SplitBagfile_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {

}

func (t _SplitBagfile_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _SplitBagfile_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__SplitBagfile_Response())
}

type CSplitBagfile_Response = C.rosbag2_interfaces__srv__SplitBagfile_Response
type CSplitBagfile_ResponseSequence = C.rosbag2_interfaces__srv__SplitBagfile_Response__Sequence

func SplitBagfile_ResponseSequenceToGo(goSlice *[]SplitBagfile_Response, cSlice CSplitBagfile_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SplitBagfile_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SplitBagfile_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SplitBagfile_ResponseSequenceToC(cSlice *CSplitBagfile_ResponseSequence, goSlice []SplitBagfile_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__SplitBagfile_Response)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__SplitBagfile_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SplitBagfile_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SplitBagfile_ResponseArrayToGo(goSlice []SplitBagfile_Response, cSlice []CSplitBagfile_Response) {
	for i := 0; i < len(cSlice); i++ {
		SplitBagfile_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SplitBagfile_ResponseArrayToC(cSlice []CSplitBagfile_Response, goSlice []SplitBagfile_Response) {
	for i := 0; i < len(goSlice); i++ {
		SplitBagfile_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
