// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/burst.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("rosbag2_interfaces/Burst", BurstTypeSupport)
	<no value>.RegisterService("rosbag2_interfaces/srv/Burst", BurstTypeSupport)
}

type _BurstTypeSupport struct {}

func (s _BurstTypeSupport) Request() <no value>.MessageTypeSupport {
	return Burst_RequestTypeSupport
}

func (s _BurstTypeSupport) Response() <no value>.MessageTypeSupport {
	return Burst_ResponseTypeSupport
}

func (s _BurstTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__Burst())
}

// Modifying this variable is undefined behavior.
var BurstTypeSupport <no value>.ServiceTypeSupport = _BurstTypeSupport{}

// BurstClient wraps <no value>.Client to provide type safe helper
// functions
type BurstClient struct {
	*<no value>.Client
}

// NewBurstClient creates and returns a new client for the
// Burst
func NewBurstClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*BurstClient, error) {
	client, err := node.NewClient(serviceName, BurstTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BurstClient{client}, nil
}

func (s *BurstClient) Send(ctx context.Context, req *Burst_Request) (*Burst_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*Burst_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type BurstServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s BurstServiceResponseSender) SendResponse(resp *Burst_Response) error {
	return s.sender.SendResponse(resp)
}

type BurstServiceRequestHandler func(*<no value>.ServiceInfo, *Burst_Request, BurstServiceResponseSender)

// BurstService wraps <no value>.Service to provide type safe helper
// functions
type BurstService struct {
	*<no value>.Service
}

// NewBurstService creates and returns a new service for the
// Burst
func NewBurstService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler BurstServiceRequestHandler) (*BurstService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*Burst_Request)
		responseSender := BurstServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, BurstTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &BurstService{service}, nil
}