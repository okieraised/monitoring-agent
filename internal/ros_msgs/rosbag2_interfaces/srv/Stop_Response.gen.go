// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/pkg/rclgo"
	"github.com/okieraised/rclgo/pkg/rclgo/typemap"
	"github.com/okieraised/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/stop.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/Stop_Response", Stop_ResponseTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/Stop_Response", Stop_ResponseTypeSupport)
}

type Stop_Response struct {
}

// NewStop_Response creates a new Stop_Response with default values.
func NewStop_Response() *Stop_Response {
	self := Stop_Response{}
	self.SetDefaults()
	return &self
}

func (t *Stop_Response) Clone() *Stop_Response {
	c := &Stop_Response{}
	return c
}

func (t *Stop_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Stop_Response) SetDefaults() {
}

func (t *Stop_Response) GetTypeSupport() types.MessageTypeSupport {
	return Stop_ResponseTypeSupport
}

// Stop_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Stop_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewStop_ResponsePublisher creates and returns a new publisher for the
// Stop_Response
func NewStop_ResponsePublisher(node *rclgo.Node, topicName string, options *rclgo.PublisherOptions) (*Stop_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, Stop_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Stop_ResponsePublisher{pub}, nil
}

func (p *Stop_ResponsePublisher) Publish(msg *Stop_Response) error {
	return p.Publisher.Publish(msg)
}

// Stop_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Stop_ResponseSubscription struct {
	*rclgo.Subscription
}

// Stop_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a Stop_ResponseSubscription.
type Stop_ResponseSubscriptionCallback func(msg *Stop_Response, info *rclgo.MessageInfo, err error)

// NewStop_ResponseSubscription creates and returns a new subscription for the
// Stop_Response
func NewStop_ResponseSubscription(node *rclgo.Node, topicName string, opts *rclgo.SubscriptionOptions, subscriptionCallback Stop_ResponseSubscriptionCallback) (*Stop_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Stop_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Stop_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Stop_ResponseSubscription{sub}, nil
}

func (s *Stop_ResponseSubscription) TakeMessage(out *Stop_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStop_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStop_ResponseSlice(dst, src []Stop_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Stop_ResponseTypeSupport types.MessageTypeSupport = _Stop_ResponseTypeSupport{}

type _Stop_ResponseTypeSupport struct{}

func (t _Stop_ResponseTypeSupport) New() types.Message {
	return NewStop_Response()
}

func (t _Stop_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Stop_Response
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Stop_Response__create())
}

func (t _Stop_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Stop_Response__destroy((*C.rosbag2_interfaces__srv__Stop_Response)(pointer_to_free))
}

func (t _Stop_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {

}

func (t _Stop_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _Stop_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Stop_Response())
}

type CStop_Response = C.rosbag2_interfaces__srv__Stop_Response
type CStop_ResponseSequence = C.rosbag2_interfaces__srv__Stop_Response__Sequence

func Stop_ResponseSequenceToGo(goSlice *[]Stop_Response, cSlice CStop_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Stop_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Stop_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Stop_ResponseSequenceToC(cSlice *CStop_ResponseSequence, goSlice []Stop_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Stop_Response)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Stop_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Stop_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Stop_ResponseArrayToGo(goSlice []Stop_Response, cSlice []CStop_Response) {
	for i := 0; i < len(cSlice); i++ {
		Stop_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Stop_ResponseArrayToC(cSlice []CStop_Response, goSlice []Stop_Response) {
	for i := 0; i < len(goSlice); i++ {
		Stop_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
