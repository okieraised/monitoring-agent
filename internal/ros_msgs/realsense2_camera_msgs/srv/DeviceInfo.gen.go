// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <realsense2_camera_msgs/srv/device_info.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("realsense2_camera_msgs/DeviceInfo", DeviceInfoTypeSupport)
	<no value>.RegisterService("realsense2_camera_msgs/srv/DeviceInfo", DeviceInfoTypeSupport)
}

type _DeviceInfoTypeSupport struct {}

func (s _DeviceInfoTypeSupport) Request() <no value>.MessageTypeSupport {
	return DeviceInfo_RequestTypeSupport
}

func (s _DeviceInfoTypeSupport) Response() <no value>.MessageTypeSupport {
	return DeviceInfo_ResponseTypeSupport
}

func (s _DeviceInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__realsense2_camera_msgs__srv__DeviceInfo())
}

// Modifying this variable is undefined behavior.
var DeviceInfoTypeSupport <no value>.ServiceTypeSupport = _DeviceInfoTypeSupport{}

// DeviceInfoClient wraps <no value>.Client to provide type safe helper
// functions
type DeviceInfoClient struct {
	*<no value>.Client
}

// NewDeviceInfoClient creates and returns a new client for the
// DeviceInfo
func NewDeviceInfoClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*DeviceInfoClient, error) {
	client, err := node.NewClient(serviceName, DeviceInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DeviceInfoClient{client}, nil
}

func (s *DeviceInfoClient) Send(ctx context.Context, req *DeviceInfo_Request) (*DeviceInfo_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*DeviceInfo_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type DeviceInfoServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s DeviceInfoServiceResponseSender) SendResponse(resp *DeviceInfo_Response) error {
	return s.sender.SendResponse(resp)
}

type DeviceInfoServiceRequestHandler func(*<no value>.ServiceInfo, *DeviceInfo_Request, DeviceInfoServiceResponseSender)

// DeviceInfoService wraps <no value>.Service to provide type safe helper
// functions
type DeviceInfoService struct {
	*<no value>.Service
}

// NewDeviceInfoService creates and returns a new service for the
// DeviceInfo
func NewDeviceInfoService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler DeviceInfoServiceRequestHandler) (*DeviceInfoService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*DeviceInfo_Request)
		responseSender := DeviceInfoServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, DeviceInfoTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &DeviceInfoService{service}, nil
}