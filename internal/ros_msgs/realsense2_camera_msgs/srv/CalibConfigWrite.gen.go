// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <realsense2_camera_msgs/srv/calib_config_write.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	<no value>.RegisterService("realsense2_camera_msgs/CalibConfigWrite", CalibConfigWriteTypeSupport)
	<no value>.RegisterService("realsense2_camera_msgs/srv/CalibConfigWrite", CalibConfigWriteTypeSupport)
}

type _CalibConfigWriteTypeSupport struct {}

func (s _CalibConfigWriteTypeSupport) Request() <no value>.MessageTypeSupport {
	return CalibConfigWrite_RequestTypeSupport
}

func (s _CalibConfigWriteTypeSupport) Response() <no value>.MessageTypeSupport {
	return CalibConfigWrite_ResponseTypeSupport
}

func (s _CalibConfigWriteTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__realsense2_camera_msgs__srv__CalibConfigWrite())
}

// Modifying this variable is undefined behavior.
var CalibConfigWriteTypeSupport <no value>.ServiceTypeSupport = _CalibConfigWriteTypeSupport{}

// CalibConfigWriteClient wraps <no value>.Client to provide type safe helper
// functions
type CalibConfigWriteClient struct {
	*<no value>.Client
}

// NewCalibConfigWriteClient creates and returns a new client for the
// CalibConfigWrite
func NewCalibConfigWriteClient(node *<no value>.Node, serviceName string, options *<no value>.ClientOptions) (*CalibConfigWriteClient, error) {
	client, err := node.NewClient(serviceName, CalibConfigWriteTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CalibConfigWriteClient{client}, nil
}

func (s *CalibConfigWriteClient) Send(ctx context.Context, req *CalibConfigWrite_Request) (*CalibConfigWrite_Response, *<no value>.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*CalibConfigWrite_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type CalibConfigWriteServiceResponseSender struct {
	sender <no value>.ServiceResponseSender
}

func (s CalibConfigWriteServiceResponseSender) SendResponse(resp *CalibConfigWrite_Response) error {
	return s.sender.SendResponse(resp)
}

type CalibConfigWriteServiceRequestHandler func(*<no value>.ServiceInfo, *CalibConfigWrite_Request, CalibConfigWriteServiceResponseSender)

// CalibConfigWriteService wraps <no value>.Service to provide type safe helper
// functions
type CalibConfigWriteService struct {
	*<no value>.Service
}

// NewCalibConfigWriteService creates and returns a new service for the
// CalibConfigWrite
func NewCalibConfigWriteService(node *<no value>.Node, name string, options *<no value>.ServiceOptions, handler CalibConfigWriteServiceRequestHandler) (*CalibConfigWriteService, error) {
	h := func(rmw *<no value>.ServiceInfo, msg <no value>.Message, rs <no value>.ServiceResponseSender) {
		m := msg.(*CalibConfigWrite_Request)
		responseSender := CalibConfigWriteServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, CalibConfigWriteTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &CalibConfigWriteService{service}, nil
}